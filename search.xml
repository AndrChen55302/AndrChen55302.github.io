<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>natapp</title>
      <link href="/2021/10/21/SpringBoot/natapp/"/>
      <url>/2021/10/21/SpringBoot/natapp/</url>
      
        <content type="html"><![CDATA[<h1 id="natapp的使用"><a href="#natapp的使用" class="headerlink" title="natapp的使用"></a>natapp的使用</h1><h3 id="1-natapp是干什么的？"><a href="#1-natapp是干什么的？" class="headerlink" title="1.natapp是干什么的？"></a>1.natapp是干什么的？</h3><p>(1).在进行微信公众号开发时，我们需要搭建网站，并且随时都有可能修改网站内容进行调试。如果能够将内网ip映射到外网上，将大大方便我们的调试。每次发布只需eclipse/Idea运行应用即可。<br>(2).通过natapp将内网映射到外网，还可以方便我们其他工作，比如外网展示网站等。<br>总之一句话，我们使用natapp主要是用来实现内网穿透。便于开发。</p><h3 id="2-下载"><a href="#2-下载" class="headerlink" title="2.下载"></a>2.下载</h3><p>打开==&gt; <a href="https://natapp.cn/">NATAPP-内网穿透 基于ngrok的国内高速内网映射工具</a> 进入官网</p><p><img src="https://cdn.jsdelivr.net/gh/get103/image1/imgimage-20211021113255472.png" alt="image-20211021113255472"></p><p>点击导航栏的==客户端下载==，选择需要的版本，本次演示使用的是 windows 64位，点击后即可下载</p><p><img src="https://cdn.jsdelivr.net/gh/get103/image1/imgimage-20211021113535251.png" alt="image-20211021113535251"></p><h3 id="3-注册登录"><a href="#3-注册登录" class="headerlink" title="3.注册登录"></a>3.注册登录</h3><p>接下来我们开始注册</p><p><img src="https://cdn.jsdelivr.net/gh/get103/image1/imgimage-20211021113839637.png" alt="image-20211021113839637"></p><p>界面如下，进行注册</p><p><img src="https://cdn.jsdelivr.net/gh/get103/image1/imgimage-20211021113920751.png" alt="image-20211021113920751"></p><p>注册完成之后，点击登录进入一下界面</p><p><img src="https://cdn.jsdelivr.net/gh/get103/image1/imgimage-20211021114108360.png" alt="image-20211021114108360"></p><p>之后我们要进行实名认证，</p><p><img src="https://cdn.jsdelivr.net/gh/get103/image1/imgimage-20211021114404394.png" alt="image-20211021114404394"></p><h3 id="4-购买隧道与配置"><a href="#4-购买隧道与配置" class="headerlink" title="4.购买隧道与配置"></a>4.购买隧道与配置</h3><p>认证后，点击购买隧道</p><p><img src="https://cdn.jsdelivr.net/gh/get103/image1/imgimage-20211021114433644.png" alt="image-20211021114433644"></p><p><img src="https://cdn.jsdelivr.net/gh/get103/image1/imgimage-20211021114447087.png" alt="image-20211021114447087"></p><p>选择安全隧道，进行配置。这里我使用的是Web协议和80端口，完成之后点击免费购买</p><p><img src="https://cdn.jsdelivr.net/gh/get103/image1/imgimage-20211021114557586.png" alt="image-20211021114557586"></p><p>配置购买成功的隧道</p><p>下图是我购买成功的隧道，这是我申请的一个免费隧道，如果购买了其他的隧道也会在下面显示</p><p><img src="https://cdn.jsdelivr.net/gh/get103/image1/imgimage-20211021115012476.png" alt="image-20211021115012476"></p><p>点击复制复制获取你的token</p><p><code>这里点击&quot;点击复制&quot;可能没用(那为什么要加一个复制按钮····)，可以点击显示，然后手动复制</code></p><p><img src="https://cdn.jsdelivr.net/gh/get103/image1/imgimage-20211021140826248.png" alt="image-20211021140826248"></p><h3 id="5-启动"><a href="#5-启动" class="headerlink" title="5.启动"></a>5.启动</h3><p>接下来将我们之前下载的natapp解压出来</p><p><img src="https://cdn.jsdelivr.net/gh/get103/image1/imgimage-20211021141308596.png" alt="image-20211021141308596"></p><p>然后双击启动，效果如下图</p><p><img src="https://cdn.jsdelivr.net/gh/get103/image1/imgimage-20211021141341981.png" alt="image-20211021141341981"></p><p> 然后在这个cmd窗口输入命令<strong>natapp -authtoken 你的token</strong>，回车运行</p><p>注意：这个token就是刚才在免费渠道获取的那个</p><blockquote><p>natapp -authtoken 你的token</p></blockquote><p>显示效果如下</p><p><img src="https://cdn.jsdelivr.net/gh/get103/image1/imgimage-20211021142139003.png" alt="image-20211021142139003"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Forwarding              http://ac4esy.natappfree.cc -&gt; 127.0.0.1:80   </span><br></pre></td></tr></table></figure><p>此时<a href="http://ac4esy.natappfree.cc就映射到了你本地的80端口,需要映射到其他端口,可以在natapp进行配置./">http://ac4esy.natappfree.cc就映射到了你本地的80端口，需要映射到其他端口，可以在natapp进行配置。</a></p><p>到了这一步，你的电脑已经映射到外网了。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> natapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成阿里云OSS实现图片上传</title>
      <link href="/2021/10/14/SpringBoot/SpringBoot%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
      <url>/2021/10/14/SpringBoot/SpringBoot%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot集成阿里云OSS实现图片上传"><a href="#SpringBoot集成阿里云OSS实现图片上传" class="headerlink" title="SpringBoot集成阿里云OSS实现图片上传"></a>SpringBoot集成阿里云OSS实现图片上传</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果需要上传到服务器的图片过多，而且还不想上传到自己服务器，可以使用阿里云的OSS服务器来存储</p><p>集成第三方平台的话，需要好好看对方的API文档！</p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ul><li><p>在在阿里云上注册账号并开通OSS服务</p></li><li><p>有一个Bucket并设置设置读写权限为公共读写其余选项视情况而定</p></li></ul><h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><h3 id="1、记录重要数据"><a href="#1、记录重要数据" class="headerlink" title="1、记录重要数据"></a>1、记录重要数据</h3><ul><li>Endpoint 地域结点、</li><li><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/image-20211014145150214.png" alt="image-20211014145150214"></li><li>记录创建成功的AccessKeyId 和 AccessSecret</li><li><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211014150011539.png" alt="image-20211014150011539"></li><li>上面创建Bucket时所取得名字 BucketName</li></ul><h3 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h3><blockquote><p><strong>文章目录如下:</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1634195690000.png"></p><h4 id="在pom文件中引入依赖"><a href="#在pom文件中引入依赖" class="headerlink" title="在pom文件中引入依赖"></a>在pom文件中引入依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 日期工具栏依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;joda-time&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;joda-time&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.10.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 引入 Hutool工具类 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.6.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="配置application-yml"><a href="#配置application-yml" class="headerlink" title="配置application.yml"></a>配置application.yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#阿里云OSS配置</span></span><br><span class="line"><span class="attr">aliyun:</span></span><br><span class="line">  <span class="attr">oss:</span></span><br><span class="line">    <span class="attr">file:</span></span><br><span class="line">      <span class="attr">bucketName:</span> <span class="string">Bucket名</span></span><br><span class="line">      <span class="attr">endpoint:</span> <span class="string">http://</span> <span class="string">+</span> <span class="string">Endpoint</span> <span class="string">地址</span></span><br><span class="line">      <span class="attr">keyid:</span> <span class="string">你的</span> <span class="string">AccessKeyId</span> </span><br><span class="line">      <span class="attr">keysecret:</span> <span class="string">你的</span> <span class="string">AccessSecret</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="创建工具类"><a href="#创建工具类" class="headerlink" title="创建工具类"></a>创建工具类</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.yuntu.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.InitializingBean;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class ConstantPropertiesUtils implements InitializingBean &#123;</span><br><span class="line">    //读取配置文件内容</span><br><span class="line">    @Value(&quot;$&#123;aliyun.oss.file.endpoint&#125;&quot;)</span><br><span class="line">    private String endpoint;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;aliyun.oss.file.keyid&#125;&quot;)</span><br><span class="line">    private String keyId;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;aliyun.oss.file.keysecret&#125;&quot;)</span><br><span class="line">    private String keySecret;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;aliyun.oss.file.bucketname&#125;&quot;)</span><br><span class="line">    private String bucketName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //定义公开静态常量</span><br><span class="line">    public static String END_POIND;</span><br><span class="line">    public static String ACCESS_KEY_ID;</span><br><span class="line">    public static String ACCESS_KEY_SECRET;</span><br><span class="line">    public static String BUCKET_NAME;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterPropertiesSet() throws Exception &#123;</span><br><span class="line">        END_POIND = endpoint;</span><br><span class="line">        ACCESS_KEY_ID = keyId;</span><br><span class="line">        ACCESS_KEY_SECRET = keySecret;</span><br><span class="line">        BUCKET_NAME = bucketName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建文件上传接口"><a href="#创建文件上传接口" class="headerlink" title="创建文件上传接口"></a>创建文件上传接口</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.yuntu.service;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line">public interface OssService &#123;</span><br><span class="line">    //上传头像到oss</span><br><span class="line">    String uploadFileAvatar(MultipartFile file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="实现上传功能接口实现类"><a href="#实现上传功能接口实现类" class="headerlink" title="实现上传功能接口实现类"></a>实现上传功能接口实现类</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class OssServiceImpl implements OssService &#123;</span><br><span class="line">    //上传头像到oss</span><br><span class="line">    @Override</span><br><span class="line">    public String uploadFileAvatar(MultipartFile file) &#123;</span><br><span class="line">        // 工具类获取值</span><br><span class="line">        String endpoint = ConstantPropertiesUtils.END_POIND;</span><br><span class="line">        String accessKeyId = ConstantPropertiesUtils.ACCESS_KEY_ID;</span><br><span class="line">        String accessKeySecret = ConstantPropertiesUtils.ACCESS_KEY_SECRET;</span><br><span class="line">        String bucketName = ConstantPropertiesUtils.BUCKET_NAME;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            // 创建OSS实例。</span><br><span class="line">            OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line">            //获取上传文件输入流</span><br><span class="line">            InputStream inputStream = file.getInputStream();</span><br><span class="line">            //获取文件名称</span><br><span class="line">            String fileName = file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">            //1 在文件名称里面添加随机唯一的值</span><br><span class="line">            String uuid = UUID.randomUUID().toString().replaceAll(&quot;-&quot;,&quot;&quot;);</span><br><span class="line">            // yuy76t5rew01.jpg</span><br><span class="line">            fileName = uuid+fileName;</span><br><span class="line"></span><br><span class="line">            //2 把文件按照日期进行分类</span><br><span class="line">            //获取当前日期</span><br><span class="line">            String datePath = new DateTime().toString(&quot;yyyy/MM/dd&quot;);</span><br><span class="line">            //拼接</span><br><span class="line">            fileName = datePath+&quot;/&quot;+fileName;</span><br><span class="line"></span><br><span class="line">            //调用oss方法实现上传</span><br><span class="line">            //第一个参数  Bucket名称</span><br><span class="line">            //第二个参数  上传到oss文件路径和文件名称   aa/bb/1.jpg</span><br><span class="line">            //第三个参数  上传文件输入流</span><br><span class="line">            ossClient.putObject(bucketName,fileName , inputStream);</span><br><span class="line"></span><br><span class="line">            // 关闭OSSClient。</span><br><span class="line">            ossClient.shutdown();</span><br><span class="line"></span><br><span class="line">            //把上传之后文件路径返回</span><br><span class="line">            //需要把上传到阿里云oss路径手动拼接出来</span><br><span class="line">            String url = &quot;https://&quot;+bucketName+&quot;.&quot;+endpoint+&quot;/&quot;+fileName;</span><br><span class="line">            return url;</span><br><span class="line">        &#125;catch(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在Controller-中调用获得图片的url"><a href="#在Controller-中调用获得图片的url" class="headerlink" title="在Controller 中调用获得图片的url"></a>在Controller 中调用获得图片的url</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@Api(&quot;阿里云OSS图片上传Controller&quot;)</span><br><span class="line">@CrossOrigin</span><br><span class="line">public class OssController &#123;</span><br><span class="line">    @Resource</span><br><span class="line">    private OssService ossService;</span><br><span class="line">    //上传头像的方法</span><br><span class="line">    @ApiOperation(&quot;图片上传&quot;)</span><br><span class="line">    @PostMapping(&quot;/imgUpload&quot;)</span><br><span class="line">    public String uploadOssFile(MultipartFile file) &#123;</span><br><span class="line"></span><br><span class="line">        //获取上传文件  MultipartFile</span><br><span class="line">        //返回上传到oss的路径</span><br><span class="line">        String url = ossService.uploadFileAvatar(file);</span><br><span class="line">        return url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ul><li>自己用postman测试不知道为什么获取不到文件</li><li>用vue和element-ui写了个图片上传</li><li><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN/img/hpp_upload//img/hpp_upload/image-20211014162209221.png" alt="image-20211014162209221"></li><li>完成！</li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot集成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora+Github实现图片自动上传</title>
      <link href="/2021/10/14/Typora/Typora+Github%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0/"/>
      <url>/2021/10/14/Typora/Typora+Github%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora-Github实现图片自动上传"><a href="#Typora-Github实现图片自动上传" class="headerlink" title="Typora+Github实现图片自动上传"></a>Typora+Github实现图片自动上传</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一些图片一直保存在本地万一某天删了就不好了。而且外部访问…</p><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><ul><li>Typora 工具</li><li>github仓库</li></ul><h2 id="操作三步走"><a href="#操作三步走" class="headerlink" title="操作三步走"></a>操作三步走</h2><h3 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h3><ul><li>PicGo-Core(command line)</li><li><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/image-20211014165645456.png"></li></ul><h3 id="二、修改配置文件"><a href="#二、修改配置文件" class="headerlink" title="二、修改配置文件"></a>二、修改配置文件</h3><ul><li><p>在偏好设置里面选择打开配置文件</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN/img/hpp_upload/image-20211014172431487.png" alt="image-20211014172431487"></p></li><li><p>current：上传到什么地方</p></li><li><p>仓库名：<code>AndrChen55302/CDN</code></p></li><li><p>分支名：<code>main</code></p></li><li><p>仓库的token: 自己的秘钥</p></li><li><p>指定存储路径：<code>img/hpp_upload/</code></p></li><li><p>自定义cnd域名：<code>https://cdn.jsdelivr.net/gh/AndrChen55302/CDN</code></p></li></ul><h3 id="三、测试是否成功"><a href="#三、测试是否成功" class="headerlink" title="三、测试是否成功"></a>三、测试是否成功</h3><ul><li>在图片上右键点击上传图片然后图片地址发生改变代表成功!</li><li><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN/img/hpp_upload/image-20211014172606601.png" alt="image-20211014172606601"></li></ul><h2 id="视频连接"><a href="#视频连接" class="headerlink" title="视频连接"></a>视频连接</h2><p>视频地址 :  <a href="https://www.bilibili.com/video/BV1iQ4y1678N/">https://www.bilibili.com/video/BV1iQ4y1678N/</a></p>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成Solr</title>
      <link href="/2021/10/13/SpringBoot/SpringBoot%E9%9B%86%E6%88%90/"/>
      <url>/2021/10/13/SpringBoot/SpringBoot%E9%9B%86%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本章使用SpringBoot继承Solr8.10.0简单的操作一下solr</p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ul><li>solr 开启状态中</li><li>有一个core</li></ul><h2 id="整合solr"><a href="#整合solr" class="headerlink" title="整合solr"></a>整合solr</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加 整合solr的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-solr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置solr服务器地址"><a href="#配置solr服务器地址" class="headerlink" title="配置solr服务器地址"></a>配置solr服务器地址</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  data:</span><br><span class="line">    solr:</span><br><span class="line">      host: http://192.168.128.214:8983/solr/hotel_core</span><br></pre></td></tr></table></figure><h3 id="使用Solr提供的客户端操作API"><a href="#使用Solr提供的客户端操作API" class="headerlink" title="使用Solr提供的客户端操作API"></a>使用Solr提供的客户端操作API</h3><blockquote><p>@Resource</p><p>private SolrClient solrClient;</p></blockquote><h3 id="实现添加及修改操作"><a href="#实现添加及修改操作" class="headerlink" title="实现添加及修改操作"></a>实现添加及修改操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    void createDocument() throws IOException, SolrServerException &#123;</span><br><span class="line">        //创建索引对象</span><br><span class="line">        SolrInputDocument document =new SolrInputDocument();</span><br><span class="line">        document.setField(&quot;id&quot;,&quot;55&quot;);</span><br><span class="line">        document.setField(&quot;userCode&quot;,&quot;2734@qq.com&quot;);</span><br><span class="line"></span><br><span class="line">        //添加索引</span><br><span class="line">        solrClient.add(document);</span><br><span class="line">        solrClient.commit();</span><br><span class="line">        System.out.println(&quot;添加索引库成功!&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="实现查询操作"><a href="#实现查询操作" class="headerlink" title="实现查询操作"></a>实现查询操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void queryDocument() throws IOException, SolrServerException &#123;</span><br><span class="line">    SolrQuery query = new SolrQuery();</span><br><span class="line">    //查询条件:默认查询所有</span><br><span class="line">    query.setQuery(&quot;*:*&quot;);</span><br><span class="line">    query.setSort(&quot;id&quot;,SolrQuery.ORDER.desc);</span><br><span class="line"></span><br><span class="line">    //查询结果的封装对象</span><br><span class="line">    QueryResponse queryResponse = solrClient.query(query);</span><br><span class="line">    //查询结果</span><br><span class="line">    SolrDocumentList results = queryResponse.getResults();</span><br><span class="line">    //查询到的数量</span><br><span class="line">    long numFound = results.getNumFound();</span><br><span class="line">    System.out.println(&quot;总共有几条---&gt;&quot;+numFound);</span><br><span class="line">    //遍历查询结果</span><br><span class="line">    for (SolrDocument result :results) &#123;</span><br><span class="line">        System.out.println(&quot;id--&gt;&quot;+result.get(&quot;id&quot;));</span><br><span class="line">        System.out.println(&quot;userCode--&gt;&quot;+result.get(&quot;userCode&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现删除操作"><a href="#实现删除操作" class="headerlink" title="实现删除操作"></a>实现删除操作</h3><ul><li><p>根据id删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void delById() throws IOException, SolrServerException &#123;</span><br><span class="line">    solrClient.deleteById(&quot;55&quot;);</span><br><span class="line">    solrClient.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>根据key和value删除</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Test</span><br><span class="line">void delByQuery() throws IOException, SolrServerException &#123;</span><br><span class="line">    solrClient.deleteByQuery(&quot;id:55&quot;);</span><br><span class="line">    solrClient.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot集成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solr8.x使用教程</title>
      <link href="/2021/10/12/solr/Solr8.x%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2021/10/12/solr/Solr8.x%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Solr8-x使用教程"><a href="#Solr8-x使用教程" class="headerlink" title="Solr8.x使用教程"></a>Solr8.x使用教程</h1><h2 id="搜索引擎简介"><a href="#搜索引擎简介" class="headerlink" title="搜索引擎简介"></a>搜索引擎简介</h2><h3 id="1、Elasticsearch简介"><a href="#1、Elasticsearch简介" class="headerlink" title="1、Elasticsearch简介"></a>1、Elasticsearch简介</h3><p>Elasticsearch是一个实时分布式搜索和分析引擎。它让你以前所未有的速度处理大数据成为可能。</p><p>它用于全文搜索、结构化搜索、分析以及将这三者混合使用：</p><p>维基百科使用Elasticsearch提供全文搜索并高亮关键字，以及输入实时搜索(search-asyou-type)和搜索纠错(did-you-mean)等搜索建议功能。</p><p>英国卫报使用Elasticsearch结合用户日志和社交网络数据提供给他们的编辑以实时的反馈，以便及时了解公众对新发表的文章的回应。<br>StackOverflow结合全文搜索与地理位置查询，以及more-like-this功能来找到相关的问题和答案。</p><p>Github使用Elasticsearch检索1300亿行的代码。</p><p>但是Elasticsearch不仅用于大型企业，它还让像DataDog以及Klout这样的创业公司将最初的想法变成可扩展的解决方案。Elasticsearch可以在你的笔记本上运行，也可以在数以百计的服务器上处理PB级别的数据 。</p><p>Elasticsearch是一个基于Apache Lucene(TM)的开源搜索引擎。无论在开源还是专有领域，Lucene可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。</p><p>但是，Lucene只是一个库。想要使用它，你必须使用Java来作为开发语言并将其直接集成到你的应用中，更糟糕的是，Lucene非常复杂，你需要深入了解检索的相关知识来理解它是如何工作的。</p><p>Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的 RESTful API 来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p><h3 id="2、Solr简介"><a href="#2、Solr简介" class="headerlink" title="2、Solr简介"></a>2、Solr简介</h3><p>Solr 是Apache下的一个顶级开源项目，采用Java开发，它是基于Lucene的全文搜索服务器。Solr提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展，并对索引、搜索性能进行了优化</p><p>Solr可以独立运行，运行在Jetty、Tomcat等这些Servlet容器中，Solr 索引的实现方法很简单，用 POST 方法向 Solr 服务器发送一个描述 Field 及其内容的 XML 文档，Solr根据xml文档添加、删除、更新索引 。Solr 搜索只需要发送 HTTP GET 请求，然后对 Solr 返回Xml、json等格式的查询结果进行解析，组织页面布局。Solr不提供构建UI的功能，Solr提供了一个管理界面，通过管理界面可以查询Solr的配置和运行情况。</p><p>solr是基于lucene开发企业级搜索服务器，实际上就是封装了lucene。</p><p>Solr是一个独立的企业级搜索应用服务器，它对外提供类似于Web-service的API接口。用户可以通过http请求，向搜索引擎服务器提交一定格式的文件，生成索引；也可以通过提出查找请求，并得到返回结果。</p><h3 id="3、Lucene简介"><a href="#3、Lucene简介" class="headerlink" title="3、Lucene简介"></a>3、Lucene简介</h3><p>Lucene是apache软件基金会4 jakarta项目组的一个子项目，是一个开放源代码的全文检索引擎工具包，但它不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎（英文与德文两种西方语言）。Lucene的目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能，或者是以此为基础建立起完整的全文检索引擎。Lucene是一套用于全文检索和搜寻的开源程式库，由Apache软件基金会支持和提供。Lucene提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。在Java开发环境里Lucene是一个成熟的免费开源工具。就其本身而言，Lucene是当前以及最近几年最受欢迎的免费Java信息检索程序库。人们经常提到信息检索程序库，虽然与搜索引擎有关，但不应该将信息检索程序库与搜索引擎相混淆。</p><p>Lucene是一个全文检索引擎的架构。那什么是全文搜索引擎？</p><p>全文搜索引擎是名副其实的搜索引擎，国外具代表性的有Google、Fast/AllTheWeb、AltaVista、Inktomi、Teoma、WiseNut等，国内著名的有百度（Baidu）。它们都是通过从互联网上提取的各个网站的信息（以网页文字为主）而建立的数据库中，检索与用户查询条件匹配的相关记录，然后按一定的排列顺序将结果返回给用户，因此他们是真正的搜索引擎。</p><p>从搜索结果来源的角度，全文搜索引擎又可细分为两种，一种是拥有自己的检索程序（Indexer），俗称“蜘蛛”（Spider）程序或“机器人”（Robot）程序，并自建网页数据库，搜索结果直接从自身的数据库中调用，如上面提到的7家引擎；另一种则是租用其他引擎的数据库，并按自定的格式排列搜索结果，如Lycos引擎。</p><h3 id="4、Elasticsearch和Solr比较"><a href="#4、Elasticsearch和Solr比较" class="headerlink" title="4、Elasticsearch和Solr比较"></a>4、Elasticsearch和Solr比较</h3><p><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/354604-20180122010705803-1082290454.png" alt="img"></p><p><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/354604-20180122010730865-1548826450.png" alt="img"></p><p><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/354604-20180122010754100-1951694800.png" alt="img"></p><p><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/354604-20180122011131225-347761833.png" alt="img"></p><h3 id="5、ElasticSearch-vs-Solr-总结"><a href="#5、ElasticSearch-vs-Solr-总结" class="headerlink" title="5、ElasticSearch vs Solr 总结"></a>5、ElasticSearch vs Solr 总结</h3><p>　　（1）es基本是开箱即用，非常简单；Solr安装略微复杂一丢丢。</p><p>　　（2）Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能。</p><p>　　（3）Solr 支持更多格式的数据，比如JSON、XML、CSV，而 Elasticsearch 仅支持json文件格式。</p><p>　　（4）Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供，例如图形化界面需要kibana友好支撑</p><p>　　（5）Solr 查询快，但更新索引时慢（即插入删除慢），用于电商等查询多的应用；</p><p>　　　　 ES建立索引快（即查询慢），即实时性查询快，用于facebook新浪等搜索。</p><p>　　   Solr 是传统搜索应用的有力解决方案，但 Elasticsearch 更适用于新兴的实时搜索应用。</p><p>　　（6）Solr比较成熟，有一个更大，更成熟的用户、开发和贡献者社区，而 Elasticsearch相对开发维护者较少，更新太快，学习使用成本较高。</p><h3 id="6、Hermes"><a href="#6、Hermes" class="headerlink" title="6、Hermes"></a>6、Hermes</h3><p>在整理solr和es资料的时候意外发现了一篇文章<a href="https://www.csdn.net/article/2014-12-22/2823243"> Hermes与开源的Solr、ElasticSearch的不同</a>，中提到了hermes和他们两者的对比，于是摘抄了下面的部分文字，由于首次见到没有什么了解，今摘抄下了给广大读者有兴趣的朋友吧1</p><p>Solr\ES ：偏重于为小规模的数据提供全文检索服务；Hermes：则更倾向于为大规模的数据仓库提供索引支持，为大规模数据仓库提供即席分析的解决方案，并降低数据仓库的成本，Hermes数据量更“大”。</p><h4 id="Solr、ES的使用特点如下："><a href="#Solr、ES的使用特点如下：" class="headerlink" title="Solr、ES的使用特点如下："></a>Solr、ES的使用特点如下：</h4><ol><li>源自搜索引擎，侧重搜索与全文检索。</li><li>数据规模从几百万到千万不等，数据量过亿的集群特别少。</li></ol><h4 id="Hermes-的使用特点如下："><a href="#Hermes-的使用特点如下：" class="headerlink" title="Hermes:的使用特点如下："></a>Hermes:的使用特点如下：</h4><ol><li>一个基于大索引技术的海量数据实时检索分析平台。侧重数据分析。 </li><li>数据规模从几亿到万亿不等。最小的表也是千万级别。在腾讯17 台TS5机器，就可以处理每天450亿的数据(每条数据1kb左右)，数据可以保存一个月之久。</li></ol><h2 id="Solr8-x实战"><a href="#Solr8-x实战" class="headerlink" title="Solr8.x实战"></a>Solr8.x实战</h2><h3 id="1、下载安装solr8"><a href="#1、下载安装solr8" class="headerlink" title="1、下载安装solr8"></a>1、下载安装solr8</h3><p>下载页面：<a href="https://solr.apache.org/downloads.html">https://solr.apache.org/downloads.html</a></p><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/image-20211012124342982.png" alt="image-20211012124342982" style="zoom:80%;" /><p>【linux版】：<a href="https://dlcdn.apache.org/lucene/solr/8.10.0/solr-8.10.0.tgz">https://dlcdn.apache.org/lucene/solr/8.10.0/solr-8.10.0.tgz</a></p><p>【Windows版】：<a href="https://dlcdn.apache.org/lucene/solr/8.10.0/solr-8.10.0.zip">https://dlcdn.apache.org/lucene/solr/8.10.0/solr-8.10.0.zip</a></p><h3 id="2、安装solr8"><a href="#2、安装solr8" class="headerlink" title="2、安装solr8"></a>2、安装solr8</h3><blockquote><p><strong>注意：</strong>需要JAVA_Home的配置</p></blockquote><p>将下载好的安装包解压到一个<strong>没有空格，没有中文</strong>的路径</p><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/image-20211012124143839.png" alt="image-20211012124143839" style="zoom: 80%;" /><h3 id="3、solr常用命令"><a href="#3、solr常用命令" class="headerlink" title="3、solr常用命令"></a>3、solr常用命令</h3><h4 id="（1）启动solr"><a href="#（1）启动solr" class="headerlink" title="（1）启动solr"></a>（1）启动solr</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">solr.<span class="built_in">cmd</span> <span class="built_in">start</span></span><br></pre></td></tr></table></figure><p>在浏览器访问：<code>localhost:8093</code>，打开如下界面，solr就启动成功了。</p><p><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/image-20211012124915529.png" alt="image-20211012124915529"></p><h4 id="（2）重启solr"><a href="#（2）重启solr" class="headerlink" title="（2）重启solr"></a>（2）重启solr</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">solr.<span class="built_in">cmd</span> restart -p 指定端口</span><br></pre></td></tr></table></figure><h4 id="（3）关闭solr"><a href="#（3）关闭solr" class="headerlink" title="（3）关闭solr"></a>（3）关闭solr</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">solr.<span class="built_in">cmd</span> stop --all</span><br></pre></td></tr></table></figure><h3 id="4、新建core"><a href="#4、新建core" class="headerlink" title="4、新建core"></a>4、新建core</h3><blockquote><p>相当于SQL的视图</p></blockquote><h4 id="（1）命令创建core"><a href="#（1）命令创建core" class="headerlink" title="（1）命令创建core"></a>（1）命令创建core</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\solr.<span class="built_in">cmd</span> create -c demo_core</span><br></pre></td></tr></table></figure><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/image-20211012133425411.png" alt="image-20211012133425411" style="zoom:80%;" /><h4 id="（2）手工创建core"><a href="#（2）手工创建core" class="headerlink" title="（2）手工创建core"></a>（2）手工创建core</h4><p>在solr目录中的\server\solr文件夹中创建一个名为<code>test-core</code>的文件夹。然后把\server\solr\configsets\sample_techproducts_configs下面的conf文件夹复制到刚才创建的<code>test-core</code>文件夹下面。</p><p><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/image-20211012125452544.png" alt="image-20211012125452544"></p><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/image-20211012125527272.png" alt="image-20211012125527272" style="zoom: 80%;" /><p>　　完成上面操作之后启动solr，启动成功之后打开浏览器进入<a href="http://127.0.0.1:8983/solr/#/%E5%9C%B0%E5%9D%80%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E8%A7%81solr%E7%9A%84%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2%E3%80%82%E7%82%B9%E5%87%BB%E5%B7%A6%E4%BE%A7%E7%9A%84Core">http://127.0.0.1:8983/solr/#/地址，就可以看见solr的管理界面。点击左侧的Core</a> Admin，在新页面的name和instanceDir输入框中分别修改为刚才创建的文件夹名称<code>test-core</code>，然后点击下面Add Core按钮即可成功创建core。</p><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/image-20211012125723876.png" alt="image-20211012125723876" style="zoom:80%;" /><p>　　页面显示创建成功之后，会在你刚才创建的<code>test-core</code>文件夹下面生成一个data文件夹和一个core.properties文件，这样即表示创建成功。</p><p><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/image-20211012130340424.png" alt="image-20211012130340424"></p><h3 id="5、连接mysql数据库"><a href="#5、连接mysql数据库" class="headerlink" title="5、连接mysql数据库"></a>5、连接mysql数据库</h3><h4 id="（1）拷贝相关jar包"><a href="#（1）拷贝相关jar包" class="headerlink" title="（1）拷贝相关jar包"></a>（1）拷贝相关jar包</h4><ul><li>solr-dataimporthandler-8.10.0.jar</li><li>solr-dataimporthandler-extras-8.10.0.jar</li><li>mysql-connector-java-xxx.jar</li></ul><p>将<code>D:\solr-8.10.0</code>目录下的<code>dist</code>目录中的两个jar：<code>solr-dataimporthandler-8.10.0.jar </code>和 <code>solr-dataimporthandler-extras-8.10.0.jar</code>以及 <code>mysql-connector-java-xxx.jar</code> 拷贝到<code>D:\solr-8.10.0\server\solr-webapp\webapp\WEB-INF\lib</code>文件夹下</p><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/image-20211012131013573.png" alt="image-20211012131013573" style="zoom:80%;" /><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/image-20211012130946111.png" alt="image-20211012130946111" style="zoom:80%;" /><h4 id="（2）修改配置文件solrconfig-xml"><a href="#（2）修改配置文件solrconfig-xml" class="headerlink" title="（2）修改配置文件solrconfig.xml"></a>（2）修改配置文件solrconfig.xml</h4><p>修改<code>D:\solr-8.10.0\server\solr\hotel_core\conf\solrconfig.xml</code></p><p>打开文件，找到下面语句的位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">requestHandler</span> <span class="attr">name</span>=<span class="string">&quot;/select&quot;</span> <span class="attr">class</span>=<span class="string">&quot;solr.SearchHandler&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在该语句的上方添加如下语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">requestHandler</span> <span class="attr">name</span>=<span class="string">&quot;/dataimport&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.solr.handler.dataimport.DataImportHandler&quot;</span>&gt;</span></span><br><span class="line">　　     <span class="tag">&lt;<span class="name">lst</span> <span class="attr">name</span>=<span class="string">&quot;defaults&quot;</span>&gt;</span></span><br><span class="line">　　        <span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">&quot;config&quot;</span>&gt;</span>data-config.xml<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">　　     <span class="tag">&lt;/<span class="name">lst</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">requestHandler</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如下图所示：</p><p><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/image-20211012131206470.png" alt="image-20211012131206470"></p><h4 id="（3）新建data-config-xml文件"><a href="#（3）新建data-config-xml文件" class="headerlink" title="（3）新建data-config.xml文件"></a>（3）新建data-config.xml文件</h4><p>在路径D:\solr-8.10.0\server\solr\hotel_core\conf下新建data-config.xml文件，文件内容如下：</p><blockquote><p>根据现有数据库的情况，选择一个表进行练习</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataConfig</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;JdbcDataSource&quot;</span> <span class="attr">driver</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/itripdb&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;1234&quot;</span> <span class="attr">encoding</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">document</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entity</span> <span class="attr">name</span>=<span class="string">&quot;itrip_user&quot;</span> <span class="attr">processor</span>=<span class="string">&quot;SqlEntityProcessor&quot;</span> <span class="attr">pk</span>=<span class="string">&quot;id&quot;</span> <span class="attr">query</span>=<span class="string">&quot;select * from itrip_user&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;userCode&quot;</span> <span class="attr">column</span>=<span class="string">&quot;userCode&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">document</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataConfig</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（4）修改文件managed-schema文件"><a href="#（4）修改文件managed-schema文件" class="headerlink" title="（4）修改文件managed-schema文件"></a>（4）修改文件managed-schema文件</h4><p>增加以下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;userCode&quot;</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">indexed</span>=<span class="string">&quot;true&quot;</span> <span class="attr">stored</span>=<span class="string">&quot;true&quot;</span> <span class="attr">multiValued</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">indexed</span>=<span class="string">&quot;true&quot;</span> <span class="attr">stored</span>=<span class="string">&quot;true&quot;</span> <span class="attr">multiValued</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6、solr导入mysql数据"><a href="#6、solr导入mysql数据" class="headerlink" title="6、solr导入mysql数据"></a>6、solr导入mysql数据</h3><h4 id="（1）重启solr服务"><a href="#（1）重启solr服务" class="headerlink" title="（1）重启solr服务"></a>（1）重启solr服务</h4><h4 id="（2）重启后打开浏览器进入到solr页面"><a href="#（2）重启后打开浏览器进入到solr页面" class="headerlink" title="（2）重启后打开浏览器进入到solr页面"></a>（2）重启后打开浏览器进入到solr页面</h4><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/image-20211012132206789.png" alt="image-20211012132206789" style="zoom:80%;" /><h4 id="（3）完成"><a href="#（3）完成" class="headerlink" title="（3）完成"></a>（3）完成</h4><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/image-20211012132329088.png" alt="image-20211012132329088" style="zoom:80%;" /><h4 id="（4）查询"><a href="#（4）查询" class="headerlink" title="（4）查询"></a>（4）查询</h4><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/image-20211012132454752.png" alt="image-20211012132454752" style="zoom: 67%;" /><h3 id="7、尝试分词操作"><a href="#7、尝试分词操作" class="headerlink" title="7、尝试分词操作"></a>7、尝试分词操作</h3><p><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/image-20211012133857255.png" alt="image-20211012133857255"></p><h3 id="8、安装中文分词库"><a href="#8、安装中文分词库" class="headerlink" title="8、安装中文分词库"></a>8、安装中文分词库</h3><h4 id="（1）下载分词库"><a href="#（1）下载分词库" class="headerlink" title="（1）下载分词库"></a>（1）下载分词库</h4><p>【下载地址】：<a href="https://search.maven.org/search?q=com.github.magese">https://search.maven.org/search?q=com.github.magese</a></p><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/image-20211012134329749.png" alt="image-20211012134329749" style="zoom: 80%;" /><h4 id="（2）配置分词库"><a href="#（2）配置分词库" class="headerlink" title="（2）配置分词库"></a>（2）配置分词库</h4><p>将下载好的分词库拷贝到<code>D:/solr-8.10.0/server/solr-webapp/webapp/WEB-INF/lib</code> 路径下</p><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/image-20211012134801918.png" alt="image-20211012134801918" style="zoom:80%;" /><p>打开<code>D:/solr-8.10.0/server/solr/hotel_core/managed-schema</code> 文件，在文件末尾<code>&lt;/schema&gt;</code>之前添加以下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">&quot;text_ik&quot;</span> <span class="attr">class</span>=<span class="string">&quot;solr.TextField&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">&quot;org.wltea.analyzer.lucene.IKTokenizerFactory&quot;</span> <span class="attr">useSmart</span>=<span class="string">&quot;false&quot;</span> <span class="attr">conf</span>=<span class="string">&quot;ik.conf&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;solr.LowerCaseFilterFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">&quot;query&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">&quot;org.wltea.analyzer.lucene.IKTokenizerFactory&quot;</span> <span class="attr">useSmart</span>=<span class="string">&quot;true&quot;</span> <span class="attr">conf</span>=<span class="string">&quot;ik.conf&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;solr.LowerCaseFilterFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如下图所示：</p><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/image-20211012135041623.png" alt="image-20211012135041623" style="zoom:80%;" /><p>重启solr服务，命令为</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">solr.<span class="built_in">cmd</span> restart</span><br></pre></td></tr></table></figure><h4 id="（3）使用手动安装的中文分词库进行分词操作"><a href="#（3）使用手动安装的中文分词库进行分词操作" class="headerlink" title="（3）使用手动安装的中文分词库进行分词操作"></a>（3）使用手动安装的中文分词库进行分词操作</h4><p>打开浏览器，重新输入语句，选择刚刚下载拷贝到solr下的ik</p><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/image-20211012135433497.png" alt="image-20211012135433497" style="zoom:80%;" /><p>分词结果如下：</p><p><img src="https://gitee.com/lexizhi/blogimg/raw/master/2021/image-20211012135451523.png" alt="image-20211012135451523"></p>]]></content>
      
      
      <categories>
          
          <category> solr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solr使用教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Redis</title>
      <link href="/2021/10/05/linux/Linux%E5%AE%89%E8%A3%85Redis/"/>
      <url>/2021/10/05/linux/Linux%E5%AE%89%E8%A3%85Redis/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>安装redis 和熟悉一些简单的命令</p><h3 id="下载Redis"><a href="#下载Redis" class="headerlink" title="下载Redis"></a>下载Redis</h3><ul><li><p>创建 在opt文件夹下创建soft</p><blockquote><p>​    mkdir /opt/soft </p></blockquote></li><li><p>使用 cd /opt/soft 进入该文件夹</p></li><li><p>使用 wget下载</p><blockquote><p>​    wget <a href="https://download.redis.io/releases/redis-5.0.13.tar.gz">https://download.redis.io/releases/redis-5.0.13.tar.gz</a> </p></blockquote></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p>解压下载好的安装包</p><blockquote><p>​    tar -zxvf redis-5.0.13.tar.gz </p></blockquote></li><li><p>查看该文件下的文件 ls</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1632737971000.png"></p><p>`` 这里需要root用户的权限 </p></li><li><p>会爆一个错误 gcc未找到 需要 c++的依赖库</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1632738073000.png"></p></li><li><p>下载 gcc</p><blockquote><p>yum install gcc</p></blockquote></li><li><p>再次出错</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1632738865000.png"></p></li><li><p>运行 make MALLOC=libc</p></li><li><p>运行 make install</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1632739061000.png"></p></li><li><p>已经可以启动</p></li></ul><h3 id="配置redis默认配置文件"><a href="#配置redis默认配置文件" class="headerlink" title="配置redis默认配置文件"></a>配置redis默认配置文件</h3><ul><li><p>需要配置项</p><ul><li>设置运行外网连接：注释#bind 127.0.0.1 ,默认情况下只允许本地连接 69</li><li>设置登录密码：添加一行 requirepass 12345 ，12345是密码 507</li><li>设置redis后台启动：daemonize no 改为 daemonize yes 136</li><li>关闭保护模式： 找到protected-mode yes 改成 protected-mode no 88</li></ul></li><li><p>返回上一级redis-5.0.13 并 修改redis.conf</p><blockquote><p>​    cd ../</p><p>​    vim redis.conf</p></blockquote></li><li><p>设置运行外网连接</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1632740249000.png"></p><p>在redis.conf中找到这个注释掉 并保存</p></li><li><p>设置登录密码</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1632740849000.png"></p></li><li><p>相信这两个改过以后 剩下两个就不用多说了</p></li><li><p>已经可以启动redis了  注意路径</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux安装软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Nginx</title>
      <link href="/2021/10/04/linux/Linux%E5%AE%89%E8%A3%85Nginx/"/>
      <url>/2021/10/04/linux/Linux%E5%AE%89%E8%A3%85Nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>说到Nginx，可能大家最先想到的就是其负载均衡以及反向代理的功能。</p><p>那今天就来安装一下吧</p><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>Nginx 下载地址：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a> </p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1633744245000.png"></p><p>开发版本主要用于 Nginx 软件项目的研发，稳定版本说明可以作为 Web 服务器投入商业应用。这里我们选择当前稳定版本：nginx-1.21.3 </p><p>将鼠标悬浮在版本号上 左下角会出现对应信息</p><h3 id="Windows版本安装"><a href="#Windows版本安装" class="headerlink" title="Windows版本安装"></a>Windows版本安装</h3><p>下载后缀为zip的安装包并解压至任意目录</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1633769302000.png"></p><p>解压目录如下:</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1633769409000.png"></p><h4 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h4><ul><li>conf 目录：存放 Nginx 的主要配置文件，很多功能实现都是通过配置该目录下的 nginx.conf 文件</li><li>docs 目录：存放 Nginx 服务器的主要文档资料，包括 Nginx 服务器的 LICENSE、OpenSSL 的 LICENSE 、PCRE 的 LICENSE 以及 zlib 的 LICENSE ，还包括本版本的 Nginx服务器升级的版本变更说明，以及 README 文档</li><li>html 目录：存放了两个后缀名为 .html 的静态网页文件，这两个文件与 Nginx 服务器的运行相关。</li><li>logs 目录：存放 Nginx 服务器运行的日志文件。</li><li>nginx.exe：启动 Nginx 服务器的exe文件，如果 conf 目录下的 nginx.conf 文件配置正确的话，通过该文件即可启动 Nginx 服务器。</li></ul><h4 id="启动和关闭-Nginx"><a href="#启动和关闭-Nginx" class="headerlink" title="启动和关闭 Nginx"></a>启动和关闭 Nginx</h4><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><p>​    双击解压之后目录中的 nginx.exe 文件，出现一闪而过的画面，则启动成功。</p><p>​    然后在浏览器中输入 <a href="http://localhost/">http://localhost</a> 或者 <a href="http://localhost/">http://localhost:80</a> 出现如下界面即启动成功。</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1633769883000.png"></p><p>​    该页面即是上面解压目录中 html 目录下的 index.html 文件。</p><h5 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h5><p>进入到解压之后的目录，输入如下命令：</p><blockquote><p>nginx.exe -s stop</p></blockquote><p>或者也可以打开任务管理器，找到 nginx 的进程，直接右键结束。</p><h3 id="linux虚拟机安装"><a href="#linux虚拟机安装" class="headerlink" title="linux虚拟机安装"></a>linux虚拟机安装</h3><p>选择的 Linux 系统为 CentOS7.6。</p><h4 id="安装-nginx环境"><a href="#安装-nginx环境" class="headerlink" title="安装 nginx环境"></a>安装 nginx环境</h4><h5 id="安装C-编译环境"><a href="#安装C-编译环境" class="headerlink" title="安装C++编译环境"></a>安装C++编译环境</h5><blockquote><p>yum install gcc-c++</p></blockquote><p>对于 gcc，因为安装nginx需要先将官网下载的源码进行编译，编译依赖gcc环境，如果没有gcc环境的话，需要安装gcc。</p><h5 id="安装模块依赖库"><a href="#安装模块依赖库" class="headerlink" title="安装模块依赖库"></a>安装模块依赖库</h5><blockquote><p>yum install pcre*</p><p>yum install openssl*</p><p>yum install zlib*</p></blockquote><p>或者</p><blockquote><p>yum -y install pcre* openssl* zlib*</p></blockquote><p>对于 pcre，prce(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式，所以需要在linux上安装pcre库。</p><p>　　对于 zlib，zlib库提供了很多种压缩和解压缩的方式，nginx使用zlib对http包的内容进行gzip，所以需要在linux上安装zlib库。</p><p>　　对于 openssl，OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。nginx不仅支持http协议，还支持https（即在ssl协议上传输http），所以需要在linux安装openssl库。</p><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><p>由于nginx较小所以使用wget下载</p><blockquote><h4 id="wget-http-nginx-org-download-nginx-1-21-3-tar-gz"><a href="#wget-http-nginx-org-download-nginx-1-21-3-tar-gz" class="headerlink" title="wget http://nginx.org/download/nginx-1.21.3.tar.gz"></a>wget <a href="http://nginx.org/download/nginx-1.21.3.tar.gz">http://nginx.org/download/nginx-1.21.3.tar.gz</a></h4></blockquote><p>解压至  /usr/local/ 目录下</p><blockquote><p>tar -zxvf nginx-1.21.3.tar.gz -C /usr/local</p></blockquote><p>进入该目录(nginx下) 并执行以下命令</p><blockquote><p>./configure</p><p>make  &amp;&amp;  make install</p></blockquote><p>执行完之后 local下会有两个文件夹 nginx/nginx-1.21.3</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1633771122000.png"></p><h4 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h4><p>我们进入到/usr/local/nginx/sbin 目录，通过如下命令启动 nginx：</p><blockquote><p>cd ./nginx/sbin/</p><p>./nginx</p></blockquote><p>当然你也可以配置环境命令，这样在任意目录都能启动 nginx。</p><p>Linux 没有消息就好消息，不提示任何信息说明启动成功。</p><p>或者也可以输入如下命令，查看 nginx 是否有服务正在运行：</p><blockquote><p>ps -ef | grep ngix</p><p>lsof -i:80</p></blockquote><p>然后我们在浏览器输入Linux系统的IP地址，出现windows安装成功的界面即可。</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1633769883000.png"></p><p>或者输入curl命令：</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1633771490000.png"></p><h4 id="关闭-1"><a href="#关闭-1" class="headerlink" title="关闭"></a>关闭</h4><p>有两种方式：</p><ul><li><p>方式1：快速停止</p><blockquote><p>cd /usr/local/nginx/sbin</p><p>./nginx -s stop</p></blockquote><p>此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。不太友好。</p></li><li><p>方式2：平缓停止</p><blockquote><p>cd /usr/local/nginx/sbin</p><p>./nginx -s quit</p></blockquote><p>此方式是指允许 nginx 服务将当前正在处理的网络请求处理完成，但不在接收新的请求，之后关闭连接，停止工作。</p></li></ul><h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><ul><li><p>方式1：先停止再启动</p><blockquote><p>./nginx -s quit</p><p>./nginx</p></blockquote><p>相当于先执行停止命令再执行启动命令。</p></li><li><p>方式2：重新加载配置文件</p><blockquote><p>./nginx -s reload</p></blockquote><p>通常我们使用nginx修改最多的便是其配置文件 nginx.conf。修改之后想要让配置文件生效而不用重启 nginx，便可以使用此命令。</p></li></ul><h4 id="检查配置文件语法是否正确"><a href="#检查配置文件语法是否正确" class="headerlink" title="检查配置文件语法是否正确"></a>检查配置文件语法是否正确</h4><ul><li><p>方式1：通过如下命令，指定需要检查的配置文件</p><blockquote><p>./nginx -t -c  /usr/local/nginx/conf/nginx.conf</p></blockquote></li><li><p>方式2：通过如下命令，不加 -c 参数，默认检测nginx.conf 配置文件。</p><blockquote><p>./nginx -t</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux安装软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux虚拟机安装Maven</title>
      <link href="/2021/10/03/linux/Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Maven/"/>
      <url>/2021/10/03/linux/Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Maven/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Maven的重要性无需多说 下就完了</p><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul><li><p>总的需要一个Linux系统吧 哈哈</p></li><li><p>已经下载过JDK了 最好是8版本的</p></li><li><p>maven安装包：</p><blockquote><p><a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a>  3.8.2</p></blockquote></li></ul><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1632731352000.png"></p><h3 id="安装-Maven"><a href="#安装-Maven" class="headerlink" title="安装 Maven"></a>安装 Maven</h3><ul><li><p>在 opt下创建一个文件夹maven并进入</p><blockquote><p>mkdir /opt/maven </p><p>cd /opt/maven</p></blockquote></li><li><p>将 安装吧移入 maven文件夹下并解压</p><blockquote><p>tar -zxvf apache-maven-3.8.2-bin.tar.gz</p></blockquote></li><li><p>重命名</p><blockquote><p>mv apache-maven-3.8.2 maven-3.8.2</p></blockquote></li></ul><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ul><li><p>vim /etc/profile</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1632732291000.png"></p></li><li><p>重新刷新配置文件</p><blockquote><p>​    source /etc/profile</p></blockquote></li></ul><h3 id="设置阿里云镜像和本地仓库"><a href="#设置阿里云镜像和本地仓库" class="headerlink" title="设置阿里云镜像和本地仓库"></a>设置阿里云镜像和本地仓库</h3><ul><li><p>vim /opt/maven/maven-3.8.2/conf/settings.xml</p></li><li><p>设置本地仓库</p><blockquote><p><localRepository>/opt/maven/local-repository/</localRepository></p></blockquote></li><li><p>设置阿里云镜像加速</p><blockquote><mirror>     <id>nexus-aliyun</id>     <mirrorOf>central</mirrorOf>     <name>Nexus aliyun</name>     <url>http://maven.aliyun.com/nexus/content/groups/public/</url></mirror></blockquote></li></ul><h3 id="查看是否成功"><a href="#查看是否成功" class="headerlink" title="查看是否成功"></a>查看是否成功</h3><p>​    命令 mvn -version</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1632732719000.png"></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux安装软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux虚拟机安装JDK1.8</title>
      <link href="/2021/10/02/linux/Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85JDK1.8/"/>
      <url>/2021/10/02/linux/Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85JDK1.8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>安装好Linux系统之后 系统会自带JDK 叫openjdk 如果只是运行的话是没问题的，但是想要在开发，那就需要自己去安装Oracle公司的JDk。</p><h3 id="卸载-OpenJDK"><a href="#卸载-OpenJDK" class="headerlink" title="卸载 OpenJDK"></a>卸载 OpenJDK</h3><ul><li>查看已有的 JDK</li></ul><blockquote><p>rpm -qa | grep java</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1632727838000.png"></p><ul><li><p>卸载 OpenJDK</p><ul><li><p>卸载单个</p><blockquote><p>yum -y remove javapackages-tools-3.4.1-11.el7.noarch</p></blockquote></li><li><p>卸载具有相同点的</p><blockquote><p>yum remove -y java-1.<em>.0-openjdk-</em></p></blockquote></li></ul></li></ul><p>​       `` 全部卸载完成之后进行下一步操作</p><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><ul><li><p>下载</p><blockquote><p><a href="https://www.oracle.com/java/technologies/downloads/#java8">https://www.oracle.com/java/technologies/downloads/#java8</a> JDK8 连接</p></blockquote></li></ul><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1632729034000.png"></p><ul><li><p>将下载好的JDK8放入Linux opt 目录下，解压到/usr/local 目</p><ul><li><p> 先试用 cd 命令进入到 opt目录下</p></li><li><p> 使用命令解压</p></li></ul><blockquote><p>tar -zxvf jdk的文件名 –C /usr/local/</p></blockquote><ul><li><p>重命名</p><p>`` 前置要求  进入local 目录</p><blockquote><p>mv jdk1.8.0_301 jdk1.8</p></blockquote></li></ul></li></ul><h3 id="配置JDK的环境变量"><a href="#配置JDK的环境变量" class="headerlink" title="配置JDK的环境变量"></a>配置JDK的环境变量</h3><ul><li><p>接下来我们需要配置一下全局的环境变量。</p><blockquote><p>我们需要修改 etc 下面的 profile 文件。命令如 下：vim /etc/profile。我们需要在 profile 文件中添加如下内容</p></blockquote></li></ul><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1632730147000.png"></p><ul><li><p>使用命令刷新配置文件</p><blockquote><p>source /etc/profile</p></blockquote></li><li><p>查看环境变量</p><blockquote><p>echo $PATH</p></blockquote></li></ul><h3 id="检测是否安装成功"><a href="#检测是否安装成功" class="headerlink" title="检测是否安装成功"></a>检测是否安装成功</h3><p>​    命令 ：java -version</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1632730457000.png"></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux安装软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成Hutool工具类</title>
      <link href="/2021/09/30/SpringBoot/SpringBoot%E9%9B%86%E6%88%90Hutool%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2021/09/30/SpringBoot/SpringBoot%E9%9B%86%E6%88%90Hutool%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在用户进行注册时，需要填写密码 这个密码我们不能直接将密码存入数据库中 我们需要使用一些工具对其进行加密,再存入。</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>在pom文件里添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 引入 Hutool工具类 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.6.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="使用Hutool"><a href="#使用Hutool" class="headerlink" title="使用Hutool"></a>使用Hutool</h3><p>编写实体类 User</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.yuntu.model;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">public class User &#123;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写controller</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import cn.hutool.crypto.SecureUtil;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/register&quot;)</span><br><span class="line">    public User saveUser(@RequestBody User user)&#123;</span><br><span class="line"></span><br><span class="line">        String md5Password = SecureUtil.md5(user.getPassword());</span><br><span class="line">        user.setPassword(md5Password);</span><br><span class="line">        log.info(user.toString());</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用postman测试</p><p><a href="http://localhost:8080/register">http://localhost:8080/register</a></p><p>参数类型为 JSON</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1633778791000.jpg"></p><p>返回经过加密的密码</p><blockquote><p>{</p><p> “username”: “zhangsan”,</p><p> “password”: “e10adc3949ba59abbe56e057f20f883e”</p><p>}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot集成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成Swagger</title>
      <link href="/2021/09/30/SpringBoot/SpringBoot%E9%9B%86%E6%88%90Swagger/"/>
      <url>/2021/09/30/SpringBoot/SpringBoot%E9%9B%86%E6%88%90Swagger/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Springfox Swagger能够动态生成 API 接口供先后端进行交互和在线调试接口</p><h3 id="Swagger简介"><a href="#Swagger简介" class="headerlink" title="Swagger简介"></a>Swagger简介</h3><p> Swagger是什么？官方说法：Swagger是一个规范和完整的框架，用于建立、描述、调试和可视化 RESTful 风格的 Web 服务。通俗地说，Swagger 是一个主要用来在线建立文档的插件，主要用来高质量地动态生成 API 接口供先后端进行交互和在线调试接口，若是不生成的话就须要写静态文档来交互，那样不只速度慢并且不容易修改。发现了痛点就要寻找解决方案，故Swagger应运而生。java</p><p>  Springfox Swagger是Spring 基于swagger规范，能够将基于SpringMVC和Spring Boot项目的源码自动生成JSON格式的描述文件。自己不是属于Swagger官网提供的。Spring Boot 框架是目前很是流行的微服务框架，因此，在Spring Boot 项目中集成Springfox很是有意义，能够保证及时更新API文档，下降先后端沟通成本，提升系统迭代效率。</p><h3 id="添加pom依赖"><a href="#添加pom依赖" class="headerlink" title="添加pom依赖"></a>添加pom依赖</h3><p>若想为Spring Boot项目添加无需任何配置的springfox，需引入其maven依赖库：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--整合swagger的starter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.yuntu.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line">import springfox.documentation.builders.PathSelectors;</span><br><span class="line">import springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line">import springfox.documentation.service.ApiInfo;</span><br><span class="line">import springfox.documentation.service.Contact;</span><br><span class="line">import springfox.documentation.spi.DocumentationType;</span><br><span class="line">import springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class SwaggerConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Docket createRestApi() &#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors</span><br><span class="line">                        .basePackage(&quot;com.yuntu.controller&quot;))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private ApiInfo apiInfo() &#123;</span><br><span class="line">        return new ApiInfoBuilder()</span><br><span class="line">                .title(&quot;Auth认证系统APi&quot;)</span><br><span class="line">                .version(&quot;Version 1.0&quot;)</span><br><span class="line">                .description(&quot;Auth认证系统&quot;)</span><br><span class="line">                .contact(</span><br><span class="line">                        new Contact(</span><br><span class="line">                                &quot;Accp&quot;,</span><br><span class="line">                                &quot;http://www.sean.com.cn&quot;,</span><br><span class="line">                                &quot;188@163.com&quot;))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@Configuration标注在类上，相当于把该类作为spring的xml配置文件中的<code>&lt;beans&gt;</code>，作用为：配置spring容器(应用上下文)</p></blockquote><h3 id="丰富文档内容"><a href="#丰富文档内容" class="headerlink" title="丰富文档内容"></a>丰富文档内容</h3><p>在完成了上述配置后，已经算是初步集成Springfox Swagger3，能够启动服务查看API文档内容了。可是这样的文档主要针对请求自己，描述信息的主要来源是函数的命名，对用户并不友好，咱们一般须要使用swagger注解增长一些说明文字来使得API文档内容更加丰满。Swagger中经常使用的注解及其说明：</p><ul><li><p>@Api：用在类上，说明该类的做用。</p></li><li><p>@ApiOperation：为API增长方法说明。</p></li><li><p>@ApiImplicitParams : 用在方法上包含一组参数说明。</p></li><li><p>@ApiImplicitParam：给方法入参增长说明。</p></li><li><p>@ApiResponses：用于表示一组响应</p></li><li><p>@ApiResponse：用在@ApiResponses中，通常用于表达一个错误的响应信息</p><ul><li> l  code：数字，例如400</li><li> l  message：信息，例如”必填参数不可为空”</li><li> l  response：抛出异常的类  </li></ul></li><li><p>@ApiModel：描述一个Model的信息（通常用在请求参数没法使用@ApiImplicitParam注解进行描述的时候）</p><ul><li>@ApiModelProperty：描述一个model的属性</li></ul></li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>修改API实体类User，添加swagger注解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.yuntu.model;</span><br><span class="line"></span><br><span class="line">import io.swagger.annotations.ApiModel;</span><br><span class="line">import io.swagger.annotations.ApiModelProperty;</span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@ApiModel(&quot;用户实体&quot;)</span><br><span class="line">public class User implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    @ApiModelProperty(&quot;用户名&quot;)</span><br><span class="line">    private String username;</span><br><span class="line">    @ApiModelProperty(&quot;用户密码&quot;)</span><br><span class="line">    private String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在实体类使用注解@ApiModel和 @ApiModelProperty能够添加属性备注，这些备注信息将展现在swagger页面的Schema中，效果以下：</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1633780720000.png"></p><p>在 controller 包下新建 UserController.java 类，经过在控制器类上增长 @Api 注解，能够给控制器添加标签信息。经过在接口方法上增长 @ApiOperation 注解来添加对接口的描述。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.yuntu.controller;</span><br><span class="line"></span><br><span class="line">import io.swagger.annotations.Api;</span><br><span class="line">import io.swagger.annotations.ApiOperation;</span><br><span class="line">import io.swagger.annotations.ApiParam;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/test&quot;)</span><br><span class="line">@Api(value = &quot;myApi&quot;, tags = &quot;API测试接口&quot;)</span><br><span class="line">public class TestController &#123;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(&quot;测试接口1&quot;)</span><br><span class="line">    @GetMapping(&quot;/test1&quot;)</span><br><span class="line">    public String test1(@ApiParam(&quot;测试参数1&quot;) String test)&#123;</span><br><span class="line">        return &quot;test1&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(&quot;测试接口2&quot;)</span><br><span class="line">    @PostMapping(&quot;/test2&quot;)</span><br><span class="line">    public String test2(@ApiParam(&quot;测试参数2&quot;) String test)&#123;</span><br><span class="line">        return &quot;test2&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller效果图如下</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1633780782000.png"></p><p>这个时候已经算是进一步集成Springfox-Swagger3了，启动项目后访问<code>http://IP:port/auth/swagger-ui/index.html</code>能够看到咱们的swagger文档界面，其中，IP表示服务器IP地址，port表示项目配置的端口号，your-app-root表示项目配置的根路径。在个人项目中，其访问路径是<code>http://127.0.0.1:8080/auth/swagger-ui/index.html</code>，在浏览器访问此URL进入以下文档界面：</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1633912338000.png"></p><h3 id="使用-SwaggerUI访问API"><a href="#使用-SwaggerUI访问API" class="headerlink" title="使用 SwaggerUI访问API"></a>使用 SwaggerUI访问API</h3><p> 找到用户查询API test1并进入接口详情页面，能够在详情页面右侧看到** Try it out** 按钮，单击此按钮便可进入接口调用界面，Execte 单击执行便可请求test1方法：</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1633912507000.png"></p><p>返回结果</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1633912617000.png"></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot集成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot统一返回类</title>
      <link href="/2021/09/28/SpringBoot/SpringBoot%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E7%B1%BB/"/>
      <url>/2021/09/28/SpringBoot/SpringBoot%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在进行接口开发时，一般需要一个固定的返回样式，成功和失败的时候，都按照这种格式来进行统一的返回，这样，在与其他人进行接口之间的联调时不会显得很杂乱无章。而这种固定的格式如果放在Java的每个接口单独处理时，又会在接口开发时很繁琐，所以这个时候可以采用封装一个实体类，统一返回固定模板格式的内容。</p><h2 id="封装模板"><a href="#封装模板" class="headerlink" title="封装模板"></a>封装模板</h2><p>先看一下没有封装之前，接口代码和返回格式：</p><p>request</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 用户修改</span><br><span class="line"> * @return 返回修改的用户信息</span><br><span class="line"> */</span><br><span class="line">@PutMapping(value = &quot;update&quot;)</span><br><span class="line">public User update(@RequestBody User user) &#123;</span><br><span class="line">User updatedUser = userService.update(user);</span><br><span class="line">return updatedUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>responese</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;userId&quot;</span>: <span class="string">&quot;0d67cfa7-f6a1-46b6-8e5a-b605afc98c44&quot;</span>,</span><br><span class="line"><span class="string">&quot;username&quot;</span>: <span class="string">&quot;ww&quot;</span>,</span><br><span class="line"><span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line"><span class="string">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&quot;createTime&quot;</span>: <span class="number">310863886132307</span>,</span><br><span class="line"><span class="string">&quot;updateTime&quot;</span>: <span class="number">312955781619836</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很显然，这种原始的内容返回虽然很直观，但是如果在发生错误的时候，那么接口的返回就比较的不自然了，甚至会将底层的错误对外暴露，下面介绍下一个简单的统一接口样式的封装：</p><h3 id="枚举类CodeResultEnums：定义返回码code及提示信息msg"><a href="#枚举类CodeResultEnums：定义返回码code及提示信息msg" class="headerlink" title="枚举类CodeResultEnums：定义返回码code及提示信息msg"></a>枚举类CodeResultEnums：定义返回码code及提示信息msg</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @Author: ThinkPad</span><br><span class="line"> * @Creation: 2021/9/15 11:20</span><br><span class="line"> * @Desc: 状态码管理</span><br><span class="line"> */</span><br><span class="line">public enum CodeResultEnums &#123;</span><br><span class="line">    //通用的状态码</span><br><span class="line">    SUCCESS(200,&quot;成功&quot;),</span><br><span class="line">    ERROR(400,&quot;失败&quot;),</span><br><span class="line"></span><br><span class="line">    //自定义的状态码</span><br><span class="line">    USER_CODE_EXIST(50001,&quot;用户名已被使用&quot;),//用于注册</span><br><span class="line">    USER_LOGIN_NULL(50002,&quot;用户或密码为空&quot;),//用于登录</span><br><span class="line">    USER_LOGIN_EXIST(50003,&quot;用户名不存在&quot;),//用于登录</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    private Integer code;</span><br><span class="line">    private String massage;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    CodeResultEnums(Integer code, String massage) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.massage = massage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCode(Integer code) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMassage() &#123;</span><br><span class="line">        return massage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMassage(String massage) &#123;</span><br><span class="line">        this.massage = massage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制器返回值类型"><a href="#控制器返回值类型" class="headerlink" title="控制器返回值类型"></a>控制器返回值类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @Author: ThinkPad</span><br><span class="line"> * @Creation: 2021/9/15 12:22</span><br><span class="line"> * @Desc: 控制器返回值</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">public class R&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private Integer code;</span><br><span class="line">    private String message;</span><br><span class="line">    private T data;</span><br><span class="line"></span><br><span class="line">    //1.构造函数-&gt;自定义状态码</span><br><span class="line">    public R() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public R(Integer code, String message, T data) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.message = message;</span><br><span class="line">        this.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public R(Integer code, String message) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //2.构造函数-&gt;引用枚举做状态码</span><br><span class="line">    public R(CodeResultEnums codeResultEnums) &#123;</span><br><span class="line">        this.code= codeResultEnums.getCode();</span><br><span class="line">        this.message = codeResultEnums.getMassage();</span><br><span class="line">    &#125;</span><br><span class="line">    public R(CodeResultEnums codeResultEnums, T data) &#123;</span><br><span class="line">        this.code= codeResultEnums.getCode();</span><br><span class="line">        this.message = codeResultEnums.getMassage();</span><br><span class="line">        this.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统一返回的实体类型"><a href="#统一返回的实体类型" class="headerlink" title="统一返回的实体类型"></a>统一返回的实体类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @Author: ThinkPad</span><br><span class="line"> * @Creation: 2021/9/15 13:42</span><br><span class="line"> * @Desc: 统一返回的实体类型</span><br><span class="line"> */</span><br><span class="line">public class ResponseDataUtils &#123;</span><br><span class="line">    public static &lt;T&gt; R buildSuccess(T data) &#123;</span><br><span class="line">        return new R&lt;T&gt;(CodeResultEnums.SUCCESS, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static R buildSuccess() &#123;</span><br><span class="line">        return new R(CodeResultEnums.SUCCESS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static R buildSuccess(String msg) &#123;</span><br><span class="line">        return new R(CodeResultEnums.SUCCESS.getCode(), msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static R buildSuccess(Integer code, String msg) &#123;</span><br><span class="line">        return new R(code, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; R buildSuccess(Integer code, String msg, T data) &#123;</span><br><span class="line">        return new R&lt;T&gt;(code, msg, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static R buildSuccess(CodeResultEnums CodeResultEnums) &#123;</span><br><span class="line">        return new R(CodeResultEnums);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; R buildError(T data) &#123;</span><br><span class="line">        return new R&lt;T&gt;(CodeResultEnums.ERROR, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static R buildError() &#123;</span><br><span class="line">        return new R(CodeResultEnums.ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static R buildError(String msg) &#123;</span><br><span class="line">        return new R(CodeResultEnums.ERROR.getCode(), msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static R buildError(Integer code, String msg) &#123;</span><br><span class="line">        return new R(code, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; R buildError(Integer code, String msg, T data) &#123;</span><br><span class="line">        return new R&lt;T&gt;(code, msg, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static R buildError(CodeResultEnums CodeResultEnums) &#123;</span><br><span class="line">        return new R(CodeResultEnums);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@ApiOperation(&quot;查询所有用户信息&quot;)</span><br><span class="line">    @GetMapping(&quot;/getAll&quot;)</span><br><span class="line">    public R getUserList()&#123;</span><br><span class="line">        return ResponseDataUtils.buildSuccess(userService.list());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot集成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态sql</title>
      <link href="/2021/09/08/mybatis/%E5%8A%A8%E6%80%81sql/"/>
      <url>/2021/09/08/mybatis/%E5%8A%A8%E6%80%81sql/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为一名j ava 程序员 数据库的重要性毋庸置疑，sql作为操作数据库的重要手段，</p><p>那么mybatis 中的动态sql自然也是很重要的</p><h3 id="什么是动态sql"><a href="#什么是动态sql" class="headerlink" title="什么是动态sql"></a>什么是动态sql</h3><p>MyBatis 核心对sql语句进行灵活操作，通过表达式进行判断，对sql进行灵 活拼接、组装。 动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之 前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现 在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达 式来淘汰其它大部分元素。</p><h3 id="MyBatis中用于实现动态SQL的元素主要有："><a href="#MyBatis中用于实现动态SQL的元素主要有：" class="headerlink" title="MyBatis中用于实现动态SQL的元素主要有："></a>MyBatis中用于实现动态SQL的元素主要有：</h3><ol><li>if ：利用if实现简单的条件选择 </li><li>choose（when，otherwise）：相当于java中的switch语句，通常与when和 otherwise搭配 </li><li>trim：可以灵活地去除多余的关键字 </li><li>set：解决动态更新语句 </li><li>foreach：迭代一个集合，通常用于in条件 </li><li>where：简化SQL语句中where的条件判断</li></ol><h3 id="使用if-where实现多条件查询"><a href="#使用if-where实现多条件查询" class="headerlink" title="使用if+where实现多条件查询"></a>使用if+where实现多条件查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getUserList&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">select * from user</span><br><span class="line">&lt;where&gt;</span><br><span class="line">&lt;if test=&quot;username!=null and userName!=&#x27;&#x27;&quot;&gt;</span><br><span class="line">and userName like CONCAT(&#x27;%&#x27;,#&#123;userName&#125;,&#x27;%&#x27;)</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><blockquote><p>​    上述代码就是一个最简单的if+where的SQL映射语句，where元素标签会自动识别其标 签内是否有返回值，若有，就插入一个where关键字，此外，若该标签返回的内容是以 and或者or开头的，where元素会将其自动剔除，if元素标签里主要的属性就是test属 性，test后面跟的是一个表达式，返回true或者false，以此来进行判断。</p></blockquote><h3 id="使用if-trim实现对条件查询"><a href="#使用if-trim实现对条件查询" class="headerlink" title="使用if+trim实现对条件查询"></a>使用if+trim实现对条件查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getUserList&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">select * from user</span><br><span class="line">&lt;trim prefix=&quot;where&quot; prefixOverride=&quot;and|or&quot;&gt;</span><br><span class="line">&lt;if test=&quot;username!=null and userName!=&#x27;&#x27;&quot;&gt;</span><br><span class="line">and userName like CONCAT(&#x27;%&#x27;,#&#123;userName&#125;,&#x27;%&#x27;)</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;/trim&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><blockquote><p>​    从上述代码中可以看出trim和where元素标签的用法差不多，就trim标签中多了 几个元素，那多了啥元素呢？</p></blockquote><ul><li>prefix：前缀，作用是在trim包含的内容上加上前缀。</li><li>prefix：前缀，作用是在trim包含的内容上加上前缀。</li><li>prefixOverride：对于trim包含内容的首部进行指定内容（如此处 的“and|or“）的忽略。</li><li>suffixOverride：对于trim包含内容的尾部进行指定内容的忽略。</li></ul><h3 id="使用if-set实现更新操作"><a href="#使用if-set实现更新操作" class="headerlink" title="使用if+set实现更新操作"></a>使用if+set实现更新操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=&quot;modify&quot; parameterType=&quot;AppInfo&quot;&gt;</span><br><span class="line">update app_info</span><br><span class="line">&lt;set&gt;</span><br><span class="line">&lt;if test=&quot;logoPicPath != null&quot;&gt;logoPicPath=#&#123;logoPicPath&#125;,&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;logoLocPath != null&quot;&gt;logoLocPath=#&#123;logoLocPath&#125;,&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;modifyBy != null&quot;&gt;modifyBy=#&#123;modifyBy&#125;,&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;modifyDate != null&quot;&gt;modifyDate=#&#123;modifyDate&#125;,&lt;/if&gt;</span><br><span class="line">&lt;/set&gt;</span><br><span class="line">where id=#&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><blockquote><p>​    上述代码就是一个最简单的if+set的动态SQL，从上面的代码中能看出其所做的更新操作是动态 的，意思就是说你这个值为不为空，不为空就给你更新，要是为空就不管它，emmmm，看样子 它的设计还是很人性化的。</p></blockquote><h3 id="使用if-trim实现更新操作"><a href="#使用if-trim实现更新操作" class="headerlink" title="使用if+trim实现更新操作"></a>使用if+trim实现更新操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=&quot;modify&quot; parameterType=&quot;AppInfo&quot;&gt;</span><br><span class="line">update app_info</span><br><span class="line">&lt;trim prefix=&quot;set&quot; suffixOverride=&quot;,&quot; suffix=&quot;where id=#&#123;id&#125;&quot;&gt;</span><br><span class="line">&lt;if test=&quot;logoPicPath != null&quot;&gt;logoPicPath=#&#123;logoPicPath&#125;,&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;logoLocPath != null&quot;&gt;logoLocPath=#&#123;logoLocPath&#125;,&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;modifyBy != null&quot;&gt;modifyBy=#&#123;modifyBy&#125;,&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;modifyDate != null&quot;&gt;modifyDate=#&#123;modifyDate&#125;,&lt;/if&gt;</span><br><span class="line">&lt;/trim&gt;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><h3 id="choose-when-otherwise（类似于Switch）"><a href="#choose-when-otherwise（类似于Switch）" class="headerlink" title="choose, when, otherwise（类似于Switch）"></a>choose, when, otherwise（类似于Switch）</h3><blockquote><p>​    choose, when, otherwise（类似于Switch）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getProInfoList&quot; resultType=&quot;Provider&quot; parameterType=&quot;Provider&quot;&gt;</span><br><span class="line">SELECT * FROM smbms_provider</span><br><span class="line">&lt;where&gt;</span><br><span class="line">&lt;choose&gt;</span><br><span class="line">&lt;when test=&quot;proCode!=null&quot;&gt;</span><br><span class="line">proCode LIKE concat(&#x27;%&#x27;,#&#123;proCode&#125;,&#x27;%&#x27;)</span><br><span class="line">&lt;/when&gt;</span><br><span class="line"></span><br><span class="line">&lt;when test=&quot;proName!=null&quot;&gt;</span><br><span class="line">AND proName LIKE concat(&#x27;%&#x27;,#&#123;proName&#125;,&#x27;%&#x27;)</span><br><span class="line">&lt;/when&gt;</span><br><span class="line">&lt;otherwise&gt;</span><br><span class="line">id=1;</span><br><span class="line">&lt;/otherwise&gt;</span><br><span class="line">&lt;/choose&gt;</span><br><span class="line">&lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void testgetProInfoList() &#123;</span><br><span class="line">sqlSession=MybatisUtil.creatSqlSession();</span><br><span class="line">proList = sqlSession.getMapper(ProviderMapper.class).getProInfoList(null, null);</span><br><span class="line">for (Provider provider : proList) &#123;</span><br><span class="line">logger.debug(provider.toString());;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1631025701000.png"></p><p><strong>foreach</strong></p><p>​    foreach主要用于在构建in条件中，它可以在SQL语句中迭代一个集合。 </p><p><strong>属性</strong>：</p><p>​    item：表示集合中每一个元素进行迭代的别名(如此处的roleIds)。 </p><p>​    index：指定一个名称，用于表示在迭代过程中，每次迭代到的位置。 </p><p>​    open：表示该语句以什么开始（既然是in条件语句，所以必然是以 “ ( “ 开 始） </p><p>​    separator：表示在每次进行迭代之间以什么符号作为分隔符（既然是in条 件语句，所以必然以 “ , “ 作为分隔符）。 </p><p>​    close：表示该语句以什么结束（既然是in条件语句，所以必然是以 “ ) “ 结 束）。 </p><p>​    collection：最关键并最容易出错的属性，需格外注意，该属性必须指定， 不同情况下，该属性的值是不一样的。主要有三种情况 </p><ul><li>若入参为单参数且参数类型是一个list的时候，collection属性值 为list。 </li><li>若入参为单参数且参数类型是一个数组的时候，collection属性值 为array（此处传入参数Integer[] roleIds为数组类型，故此处 collection属性值设为“array”）。 </li><li>若传入参数为多参数，就需要把它们封装为一个Map进行处理。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"> //根据角色编号，查询所有的用户‐数组方式</span><br><span class="line"> public List&lt;User&gt; getUserInfoByRole(Integer[] roleIds);</span><br><span class="line"> //根据角色编号，查询所有的用户‐list方式</span><br><span class="line"> public List&lt;User&gt; getUserInfoByRole2(List&lt;Integer&gt; roleIds);</span><br><span class="line"></span><br><span class="line"> &lt;!‐‐ 根据角色编号，查询所有的用户信息 ‐‐&gt;</span><br><span class="line"> &lt;select id=&quot;getUserInfoByRole&quot; resultType=&quot;user&quot;&gt;</span><br><span class="line"> SELECT * FROM smbms_user WHERE userRole IN</span><br><span class="line"> &lt;!‐‐ 数组方式 ‐‐&gt;</span><br><span class="line"> &lt;foreach collection=&quot;array&quot; item=&quot;roleId&quot; open=&quot;(&quot;</span><br><span class="line">eparator=&quot;,&quot; close=&quot;)&quot;&gt;</span><br><span class="line"> #&#123;roleId&#125;</span><br><span class="line"> &lt;/foreach&gt;</span><br><span class="line"> &lt;!‐‐ list方式 ‐‐&gt;</span><br><span class="line"> &lt;foreach collection=&quot;list&quot; item=&quot;roleId&quot; open=&quot;(&quot;</span><br><span class="line">parator=&quot;,&quot; close=&quot;)&quot;&gt;</span><br><span class="line"> #&#123;roleId&#125;</span><br><span class="line"> &lt;/foreach&gt;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"></span><br><span class="line"> @Test</span><br><span class="line"> void testgetUserInfoByRole() &#123;</span><br><span class="line"> String resource=&quot;mybatis‐config.xml&quot;;</span><br><span class="line"> SqlSession sqlSession = null;</span><br><span class="line"> List&lt;User&gt; userList=null;</span><br><span class="line"> Integer [] roleIds= &#123;2,3&#125;;</span><br><span class="line"> try &#123;</span><br><span class="line"> sqlSession=MybatisUtil.creatSqlSession();</span><br><span class="line"> userList = sqlSession.getMapper(UserMapper.class).getUserInfoB</span><br><span class="line">yRole(roleIds);</span><br><span class="line"> &#125; catch (Exception e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"> &#125; finally &#123;</span><br><span class="line"> MybatisUtil.closeSqlSession(sqlSession);</span><br><span class="line"> logger.debug(&quot;userList的行数：&quot; + userList.size());</span><br><span class="line"> for (User user : userList) &#123;</span><br><span class="line"> logger.debug(user.toString());</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> @Test</span><br><span class="line"> void testgetUserInfoByRole2() &#123;</span><br><span class="line"> String resource=&quot;mybatis‐config.xml&quot;;</span><br><span class="line"> SqlSession sqlSession = null;</span><br><span class="line"> List&lt;User&gt; userList=null;</span><br><span class="line"> List&lt;Integer&gt; roleIds=new ArrayList&lt;Integer&gt;();</span><br><span class="line"> try &#123;</span><br><span class="line"> sqlSession=MybatisUtil.creatSqlSession()</span><br><span class="line"> @Test</span><br><span class="line"> void testgetUserInfoByRole2() &#123;</span><br><span class="line"> String resource=&quot;mybatis‐config.xml&quot;;</span><br><span class="line"> SqlSession sqlSession = null;</span><br><span class="line"> List&lt;User&gt; userList=null;</span><br><span class="line"> List&lt;Integer&gt; roleIds=new ArrayList&lt;Integer&gt;();</span><br><span class="line"> try &#123;</span><br><span class="line"> sqlSession=MybatisUtil.creatSqlSession() </span><br></pre></td></tr></table></figure><p>代码运行效果：</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1631026105000.png"></p><p>map方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> //根据角色编号或姓名，查询用户信息</span><br><span class="line"> public List&lt;User&gt; getUserInfoByRole3(Map&lt;String, Object&gt;</span><br><span class="line">params);</span><br><span class="line"></span><br><span class="line"> &lt;select id=&quot;getUserInfoByRole3&quot; resultType=&quot;user&quot;&gt;</span><br><span class="line"> SELECT * FROM smbms_user WHERE userName like concat(&#x27;%&#x27;,#</span><br><span class="line">&#123;name&#125;,&#x27;%&#x27;) and userRole IN</span><br><span class="line"> &lt;!‐‐ map ‐‐&gt;</span><br><span class="line"> &lt;foreach collection=&quot;rolIdsKey&quot; item=&quot;roleId&quot; open=&quot;(&quot; separato</span><br><span class="line">r=&quot;,&quot; close=&quot;)&quot;&gt;</span><br><span class="line"> #&#123;roleId&#125;</span><br><span class="line"> &lt;/foreach&gt;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"> @Test</span><br><span class="line"> void testgetUserInfoByRole3() &#123;</span><br><span class="line"> String resource=&quot;mybatis‐config.xml&quot;;</span><br><span class="line"> SqlSession sqlSession = null;</span><br><span class="line"> List&lt;User&gt; userList=null;</span><br><span class="line"> List&lt;Integer&gt; roleIds=new ArrayList&lt;Integer&gt;();</span><br><span class="line"> roleIds.add(2);</span><br><span class="line"> roleIds.add(3);</span><br><span class="line"> Map&lt;String, Object&gt; params = new HashMap&lt;String, Object&gt;();</span><br><span class="line"> params.put(&quot;rolIdsKey&quot;, roleIds);</span><br><span class="line"> params.put(&quot;name&quot;, &quot;张&quot;);</span><br><span class="line"></span><br><span class="line"> try &#123;</span><br><span class="line"> sqlSession=MybatisUtil.creatSqlSession();</span><br><span class="line"> userList = sqlSession.getMapper(UserMapper.class).getUserInfoB</span><br><span class="line">yRole3(params);</span><br><span class="line"> &#125; catch (Exception e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"> &#125; finally &#123;</span><br><span class="line"> MybatisUtil.closeSqlSession(sqlSession);</span><br><span class="line"> logger.debug(&quot;userList的行数：&quot; + userList.size());</span><br><span class="line"> for (User user : userList) &#123;</span><br><span class="line"> logger.debug(user.toString());</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>代码运行效果：</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1631026290000.png"></p><h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><p>​    <strong>作用</strong>：将实现的动态sql判断代码块抽取出来，组成一个sql片段。其它的 statement（声明）中就可以引用sql片段。方便程序员进行开发 </p><p>​    先在mapper.xml中定义一个sql片段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!‐‐ 根据供应商编码或供应商名称查询供应商信息 if+where ‐‐&gt;</span><br><span class="line"> &lt;!‐‐ 定义sql片段</span><br><span class="line"> id：sql片段的唯 一标识</span><br><span class="line"> 经验：是基于单表来定义sql片段，这样话这个sql片段可重用性才高</span><br><span class="line"> 在sql片段中不要包括 where</span><br><span class="line"> ‐‐&gt;</span><br><span class="line"> &lt;sql id=&quot;query_getProInfoWhere&quot;&gt;</span><br><span class="line"> &lt;if test=&quot;proCode!=null&quot;&gt;</span><br><span class="line"> proCode LIKE concat(&#x27;%&#x27;,#&#123;proCode&#125;,&#x27;%&#x27;)</span><br><span class="line"> &lt;/if&gt;</span><br><span class="line"> &lt;if test=&quot;proName!=null&quot;&gt;</span><br><span class="line"> AND proName LIKE concat(&#x27;%&#x27;,#&#123;proName&#125;,&#x27;%&#x27;)</span><br><span class="line"> &lt;/if&gt;</span><br><span class="line"> &lt;/sql&gt;</span><br><span class="line"></span><br><span class="line"> &lt;select id=&quot;getProInfoList&quot; resultType=&quot;Provider&quot;</span><br><span class="line">parameterType=&quot;Provider&quot;&gt;</span><br><span class="line"> SELECT * FROM smbms_provider</span><br><span class="line"> &lt;where&gt;</span><br><span class="line"> &lt;!‐‐ 引用sql片段 的id，如果refid指定的id不在本mapper文件中，需要前</span><br><span class="line">加namespace ‐‐&gt;</span><br><span class="line"> &lt;include refid=&quot;query_getProInfoWhere&quot;&gt;&lt;/include&gt;</span><br><span class="line"> &lt;/where&gt;</span><br><span class="line"> &lt;/select&gt;</span><br></pre></td></tr></table></figure><p>​    代码运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1631026299000.png"></p>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven基础</title>
      <link href="/2021/09/07/maven/maven%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/09/07/maven/maven%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><h3 id="什么是maven？"><a href="#什么是maven？" class="headerlink" title="什么是maven？"></a>什么是maven？</h3><p>​    maven 主要服务于基于Java平台的项目构建、依赖管理和项目信息管理</p><h3 id="Maven的优点"><a href="#Maven的优点" class="headerlink" title="Maven的优点"></a>Maven的优点</h3><p>​    易于上手，对于新手可能一个mven clean package命令就可能满足我们的工作</p><h3 id="Maven的缺点"><a href="#Maven的缺点" class="headerlink" title="Maven的缺点"></a>Maven的缺点</h3><p>​    Maven 是一个庞大的构建系统，学习难度大</p><h3 id="Maven常用的命令"><a href="#Maven常用的命令" class="headerlink" title="Maven常用的命令"></a>Maven常用的命令</h3><p>​    mvn clean：清除项目目录中的生成结果<br>​    mvn compile：编译源代码<br>​    mvn package：根据项目生成jar/war包</p><h3 id="如何提高maven的下载速度"><a href="#如何提高maven的下载速度" class="headerlink" title="如何提高maven的下载速度"></a>如何提高maven的下载速度</h3><p>​    使用阿里云镜像</p><h3 id="maven仓库分为几类-并说明一下搜索顺序"><a href="#maven仓库分为几类-并说明一下搜索顺序" class="headerlink" title="maven仓库分为几类?并说明一下搜索顺序"></a>maven仓库分为几类?并说明一下搜索顺序</h3><p>运行maven的时候，Maven所需要的的任何构件都是直接从本地仓库获取的如果本地仓库没有，它会首先尝试从远程仓库下载构件至本地仓库然后再使用本地仓库的构件</p><p>Maven中央仓库是由Maven社区提供的仓库，其中包含了大量常用的库。<br>中央仓库员包含了绝大多数流星的开源Java构件，以及源码、作者信息、SCM<br>信息、许可证信息等 一般来说，简单的Java项目依赖的构件都可以在这里下载到</p><p>中央仓库的关键概念：</p><p>这个仓库由Maven社区管理。<br>不需要配置。<br>需要通过网络才能访问</p><p>远程(remote)<br>Maven提供了远程仓库的概念，他是开发人员自己定制仓库，包含了所需要的的代码库或者其他工程中用到的jar文件。</p><p>步骤1-在本地仓库中搜索，如果找不到，执行步骤2，<br>如果找到了则执行其他操作。<br>步骤2-在中央仓库中搜索，如果找不到，并且有一个或多个远程仓库已经设计，<br>则执行步骤4，如果找到了则下载到本地仓库中以备将来引用<br>步骤3-若果远程仓库没有被设置，Maven将简单的停滞处理并抛出错误<br>（无法找到依赖的文件）。<br>步骤4-在一个或者多个远程仓库中搜索依赖的文件，如果找到则下载到本地仓库以备将来引用，否则Maven将停止处理并抛出错误(无法找到依赖的文件)</p><h3 id="是否了解Maven私服"><a href="#是否了解Maven私服" class="headerlink" title="是否了解Maven私服"></a>是否了解Maven私服</h3><p>私服即自己私有的仓库。部署自己内部的第三方构件 够自己内部人员使用</p><h3 id="Maven的生命周期"><a href="#Maven的生命周期" class="headerlink" title="Maven的生命周期"></a>Maven的生命周期</h3><p>1.clean生命周期        ：清理项目<br>2.Deafult生命周期<br>    validate:验证工程是否正确，所有的资源是否可用<br>    compile:编译项目的源代码<br>    test:使用合适的单元测试框架来测试已编译的源代码<br>    package:打包jar/war<br>    verify:运行所有检查<br>    install：把包安装到maven本地仓库<br>    site:<br>    deploy：在继承或者发布环境下执行</p><h3 id="Maven依赖版本冲突"><a href="#Maven依赖版本冲突" class="headerlink" title="Maven依赖版本冲突"></a>Maven依赖版本冲突</h3><p>​    自己手动解决 高版本降低 低版本升高</p><h3 id="如何理解maven的“约定大于配置”"><a href="#如何理解maven的“约定大于配置”" class="headerlink" title="如何理解maven的“约定大于配置”"></a>如何理解maven的“约定大于配置”</h3><p>约定大于配置是一种开发原则，就是减少人为的配置，直接用默认的配置就能获得我们想要的结果。</p><p>所以约定大于配置，其实是要建立起尽力减少配置项，采用约定方案的思想。</p><p>1 如果使用maven,它有仓库的概念，可以帮我们依赖jar包，方便我们管理jar包，在协同开发时，更优</p><p>2 maven有自己独特的本地目录结构，不受不同IDE开发的影响，用git或者SVN托管，有不错的结构</p><p>3 maven可作多模块开发，并可在父模块pom.xml中配置依赖和插件，方便多模块管理</p>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用GitHub Action 自动部署</title>
      <link href="/2021/09/06/hexo/GitHub-Action/"/>
      <url>/2021/09/06/hexo/GitHub-Action/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我们使用hexo上传文章到仓库的时候 经常需要输入各种命令还有可能遇到各种错误</p><p>github也有解决方案  action自动部署</p><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h3><ol><li>GitHub 官方的 action：<a href="https://github.com/features/actions">GitHub Actions</a></li><li><strong>GitHub 仓库</strong><br>一般命名为 <code>&#123;&#123;username&#125;&#125;.github.io</code> 这种形式。<br>在本仓库上再创建一个分支用于保存 Hexo 开发源码。<br>使用建好的分支进行 Hexo 源码备份，使用 <code>master</code> 分支进行博客源码部署。<br>这里也可以建两个仓库分别进行博客源码和 Hexo 开发源码的保存，跟建两个分支一样。</li></ol><p>确认 <code>_config.yml</code> 文件中有类似如下的 <code>GitHub Pages</code> 配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:xpnobug/blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><blockquote><p>​    注意：将 <code>repository</code> 修改为自己的仓库地址。</p></blockquote><h3 id="2-创建-GitHub-Personal-Access-Token（创建个人访问令牌）"><a href="#2-创建-GitHub-Personal-Access-Token（创建个人访问令牌）" class="headerlink" title="2.创建 GitHub Personal Access Token（创建个人访问令牌）"></a>2.<strong>创建 GitHub Personal Access Token</strong>（创建个人访问令牌）</h3><p>用于 GitHub Actions 所构建得虚拟系统可以内容推送到仓库。<br>要使用令牌从命令行访问仓库，请选择 <strong>repo（仓库）</strong>。</p><h3 id="3-设置仓库-Secrets"><a href="#3-设置仓库-Secrets" class="headerlink" title="3.设置仓库 Secrets"></a>3.<strong>设置仓库 Secrets</strong></h3><p>将创建好的 Personal Access Token 添加到仓库的 Secrets 中 设置名称：ACCESS_TOKEN</p><blockquote><p>当然名字可以随便起</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1630915432000.png"></p><blockquote><p>应确保这里正确</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1630915665000.png"></p><h3 id="4-创建-workflow-脚本"><a href="#4-创建-workflow-脚本" class="headerlink" title="4.创建 workflow 脚本"></a>4.创建 workflow 脚本</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Blog</span> <span class="string">CI/CD</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发条件：在 push 到 hexo-blog-backup 分支后触发</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">blog-cicd:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">blog</span> <span class="string">build</span> <span class="string">&amp;</span> <span class="string">deploy</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 使用最新的 Ubuntu 系统作为编译部署的环境</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">codes</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">node</span></span><br><span class="line">      <span class="comment"># 设置 node.js 环境</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&#x27;12.x&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">      <span class="comment"># 设置包缓存目录，避免每次下载</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">hexo</span> <span class="string">dependencies</span></span><br><span class="line">      <span class="comment"># 下载 hexo-cli 脚手架及相关安装包</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        npm install -g hexo-cli</span></span><br><span class="line"><span class="string">        npm install</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">files</span></span><br><span class="line">      <span class="comment"># 编译 markdown 文件</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        hexo clean</span></span><br><span class="line"><span class="string">        hexo generate</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span> <span class="string">blog</span></span><br><span class="line">      <span class="attr">env:</span> </span><br><span class="line">        <span class="comment"># Github 仓库</span></span><br><span class="line">        <span class="attr">GITHUB_REPO:</span> <span class="string">github.com/AndrChen55302/AndrChen55302.github.io</span></span><br><span class="line">      <span class="comment"># 将编译后的博客文件推送到指定仓库</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        cd ./public &amp;&amp; git init &amp;&amp; git add .</span></span><br><span class="line"><span class="string">        git config user.name &quot;AndrChen55302&quot;</span></span><br><span class="line"><span class="string">        git config user.email &quot;2736933203@qq.com&quot;</span></span><br><span class="line"><span class="string">        git add .</span></span><br><span class="line"><span class="string">        git commit -m &quot;GitHub Actions Auto Builder at $(date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot;</span></span><br><span class="line"><span class="string">        git push --force --quiet &quot;https://$&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;@$GITHUB_REPO&quot; master:hexo-blog</span></span><br></pre></td></tr></table></figure><p>workflow 详细语法见： <a href="https://link.zhihu.com/?target=https://docs.github.com/cn/actions/reference/workflow-syntax-for-github-actions">GitHub 操作的工作流程语法</a></p><p>最后，只需要将源码推送到指定分支，GitHub Actions 就会自动部署项目.</p><p>在最后，使用 <a href="https://hexoplusplus.js.org/start/">hexoplus 后台管理部署步骤：</a></p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub Action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis基础</title>
      <link href="/2021/09/06/redis/redis/"/>
      <url>/2021/09/06/redis/redis/</url>
      
        <content type="html"><![CDATA[<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><h2 id="1-什么是Redis数据库"><a href="#1-什么是Redis数据库" class="headerlink" title="1.什么是Redis数据库"></a>1.什么是Redis数据库</h2><p>Redis是一个完全开源的高性能的key-value数据库</p><h2 id="2-数据库"><a href="#2-数据库" class="headerlink" title="2.数据库"></a>2.数据库</h2><h3 id="2-1关系型数据库"><a href="#2-1关系型数据库" class="headerlink" title="2.1关系型数据库"></a>2.1关系型数据库</h3><p>例如：Oracle、Mysql、SQLServer</p><p>关系型数据库是指采用了关系模型来组织数据的数据库</p><p>以行和列的形式存储数据，以便于用户理解</p><h4 id="2-1-1-关系型数据库特性"><a href="#2-1-1-关系型数据库特性" class="headerlink" title="2.1.1 关系型数据库特性"></a>2.1.1 关系型数据库特性</h4><p>1.关系型数据库，是采用了关系模型来组织数据的</p><p>2.最大的特点是事务的一致性</p><p>3.简单来说，关系模型就是二维的表格模型</p><p>而一个关系型数据库就是由二维表以及之间的联系所组成的一个数据组织</p><h4 id="2-1-2-关系型数据库的优点"><a href="#2-1-2-关系型数据库的优点" class="headerlink" title="2.1.2 关系型数据库的优点"></a>2.1.2 关系型数据库的优点</h4><p>1.二维表符合逻辑，容易理解，其关系模型相对网状和层次等其他关系模型更加容易理解</p><p>2.使用方便，SQL语言让操作的关系型</p><p>3.易于维护</p><h4 id="2-1-3-关系型数据库的缺点"><a href="#2-1-3-关系型数据库的缺点" class="headerlink" title="2.1.3 关系型数据库的缺点"></a>2.1.3 关系型数据库的缺点</h4><p>1.固定的表结构</p><p>2.高并发的读写需求</p><p>3.海量数据的高效率读写</p><h3 id="2-2非关系型数据库"><a href="#2-2非关系型数据库" class="headerlink" title="2.2非关系型数据库"></a>2.2非关系型数据库</h3><p>常见的非关系型数据库:Redis ,MongoDB</p><p>非关系型数据库可以为大数据建立快速、可扩展的存储库，为了解决大规模数据集合多重数据种类带来的挑战</p><h4 id="2-2-1-非关系型数据库的特性"><a href="#2-2-1-非关系型数据库的特性" class="headerlink" title="2.2.1 非关系型数据库的特性"></a>2.2.1 非关系型数据库的特性</h4><p>1.使用了键值对的形式来存储数据</p><p>2.非关系型数据库严格来说不是一种数据库应该是一种数据结构化的存储方式的集合</p><h4 id="2-2-2-非关系型数据库的优点"><a href="#2-2-2-非关系型数据库的优点" class="headerlink" title="2.2.2 非关系型数据库的优点"></a>2.2.2 非关系型数据库的优点</h4><p>1.无序经过SQl层的解析，镀锡性能很高</p><p>2.基于键值对，数据没有耦合性，容易扩展</p><p>3.存储数据的格式</p><p>​    nosql的存储格式是key-value形式</p><p>​    可以存取文档，图片等</p><p>​    而关系型数据库只能支持基本类型</p><p>4.处理高并发，大批量的数据的能力强</p><h4 id="2-2-3-非关系型数据库的缺点"><a href="#2-2-3-非关系型数据库的缺点" class="headerlink" title="2.2.3 非关系型数据库的缺点"></a>2.2.3 非关系型数据库的缺点</h4><p>1.不提供sql，学习较难</p><p>2.事务处理能力弱</p><p>3.没有完整的约束，对于复杂业务场景支持差</p><h4 id="2-2-4-Redis命令"><a href="#2-2-4-Redis命令" class="headerlink" title="2.2.4 Redis命令"></a>2.2.4 Redis命令</h4><p>redis-server.exe redis.windows.conf :启动服务</p><p>redis-cli.exe -h 127.0.0.1 -p 6379 :访问服务</p><p>1.set name zhangSan 存值</p><p>2.get name 读值</p><p>3.keys * 查看所有的key</p><p>4.del name 删除key</p><p>5.ttl name 以秒为单位返回key剩余的时间</p><p>​    返回 -1 ：一直存在</p><p>​    返回 -2 ：已过期(不可用)</p><p>6.expire userName 60 设置key的过期时间，key过期后将不可用，单位s</p><p>7.exists name 检查key是否存在</p><p>​    1：存在</p><p>​    0：不存在</p><h3 id="3-Redis支持的数据类型"><a href="#3-Redis支持的数据类型" class="headerlink" title="3.Redis支持的数据类型"></a>3.Redis支持的数据类型</h3><p>1.Redis通常被称为数据结构服务器，因为我们的value可以是</p><p>字符串(String)</p><p>字符串(Hash/Map)</p><p>字符串(list)</p><p>字符串(sets)</p><p>字符串(sorted sets)</p><h4 id="3-1-String类型"><a href="#3-1-String类型" class="headerlink" title="3.1 String类型"></a>3.1 String类型</h4><p>1.String是Redis最基本的类型</p><p>2.String是二进制安全的，可以包含任何数据</p><p>3.String类型，一个键最大能存储512MB</p><h4 id="3-2-Hash类型"><a href="#3-2-Hash类型" class="headerlink" title="3.2 Hash类型"></a>3.2 Hash类型</h4><p>1.Redis Hash 是一个键值对集合</p><p>2.是一个String类型的映射表 hash特别适合用户存储对象</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; HMSET user userName &quot;zhangSan&quot; userCode &quot;<span class="number">123</span>&quot; password &quot;<span class="number">123</span>&quot;</span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; hgetall user</span><br><span class="line"><span class="number">1</span>) &quot;userName&quot;</span><br><span class="line"><span class="number">2</span>) &quot;zhangSan&quot;</span><br><span class="line"><span class="number">3</span>) &quot;userCode&quot;</span><br><span class="line"><span class="number">4</span>) &quot;<span class="number">123</span>&quot;</span><br><span class="line"><span class="number">5</span>) &quot;password&quot;</span><br><span class="line"><span class="number">6</span>) &quot;<span class="number">123</span>&quot;</span><br></pre></td></tr></table></figure><h4 id="3-3-list类型"><a href="#3-3-list类型" class="headerlink" title="3.3 list类型"></a>3.3 list类型</h4><p>1.Redis列表式简单的字符串列表，按照插入顺序排序</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; LPUSH userList zhangsan</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; LPUSH userList lisi</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; LPUSH userList gouDan</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; LRANGE userList <span class="number">0</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span>) &quot;gouDan&quot;</span><br><span class="line"><span class="number">2</span>) &quot;lisi&quot;</span><br><span class="line"><span class="number">3</span>) &quot;zhangsan&quot;</span><br></pre></td></tr></table></figure><h4 id="3-4-set类型"><a href="#3-4-set类型" class="headerlink" title="3.4 set类型"></a>3.4 set类型</h4><p>1.Redis的set是String类型的无序列表</p><p>2.Redis中集合时通过哈希表实现的，所以添加，删除，查找都很简单</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; Sadd nameSet &quot;aaa&quot;</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; Sadd nameSet &quot;bbb&quot;</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; Sadd nameSet &quot;ccc&quot;</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; SMEMBERS nameSet</span><br><span class="line"><span class="number">1</span>) &quot;bbb&quot;</span><br><span class="line"><span class="number">2</span>) &quot;aaa&quot;</span><br><span class="line"><span class="number">3</span>) &quot;ccc&quot;</span><br></pre></td></tr></table></figure><h4 id="3-5-sorted-sets类型"><a href="#3-5-sorted-sets类型" class="headerlink" title="3.5 sorted sets类型"></a>3.5 sorted sets类型</h4><p>1.有序列表和我们的set一样是String类型的集合</p><p>2.不允许有重复的成员</p><p>3.关联一个double类型的分数，然后通过分数来为Redis中的集合成员进行从小到大的排序</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; ZADD list <span class="number">1</span> qwe</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; ZADD list <span class="number">2</span> asd</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; ZADD list <span class="number">3</span> zxc</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; ZRANGE list <span class="number">0</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span>) &quot;qwe&quot;</span><br><span class="line"><span class="number">2</span>) &quot;asd&quot;</span><br><span class="line"><span class="number">3</span>) &quot;zxc&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; ZRANGE list <span class="number">0</span> <span class="number">10</span> WITHSCORES</span><br><span class="line"><span class="number">1</span>) &quot;qwe&quot;</span><br><span class="line"><span class="number">2</span>) &quot;<span class="number">1</span>&quot;</span><br><span class="line"><span class="number">3</span>) &quot;asd&quot;</span><br><span class="line"><span class="number">4</span>) &quot;<span class="number">2</span>&quot;</span><br><span class="line"><span class="number">5</span>) &quot;zxc&quot;</span><br><span class="line"><span class="number">6</span>) &quot;<span class="number">3</span>&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3.0中setup</title>
      <link href="/2021/09/06/vue/setup%E5%87%BD%E6%95%B0/"/>
      <url>/2021/09/06/vue/setup%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我们vue2.0中 我们频繁的使用data,computed,methods,watch等等</p><p>来处理我们组件间的逻辑和数据当我们组件“越来越大”的时候，会导致组件难以阅读和理解，<br>这时通过setup将某一部分抽离成函数，让开发者省心。</p><h2 id="setup函数"><a href="#setup函数" class="headerlink" title="setup函数"></a>setup函数</h2><blockquote><ol><li><p>什么是setup===&gt;Composition API（组合API）的入口</p></li><li><p>setup基础知识</p><blockquote><p>1): setup所在位置是beforeCreate和created之前的</p><p>2): 因为在 1）带来的影响 我们如果想要使用setup的话</p><pre><code>                                data数据和methods方法都无法使用</code></pre><p>3): 在setup单独声明一个变量是，如果setup的变量名</p><pre><code>                     和vue中的data里面变量名一样，setup的优先级更高    </code></pre></blockquote></li></ol></blockquote><h3 id="setup的优先级"><a href="#setup的优先级" class="headerlink" title="setup的优先级"></a>setup的优先级</h3><p>setup&gt;create&gt;….其余生命周期</p><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><blockquote><p>ref创建响应式引用</p><p><code>ref</code>函数声明称为count的<strong>响应式属性</strong>。 它可以包装任何原始类型或对象，并<strong>返回</strong>它的响应式引用。 传递元素的值将保留在创建引用的值属性中。 例如，如果要访问count引用的值，则需要扩展请求<code>count.value</code>.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3 @click=&quot;addCount()&quot;&gt;点击+1:&#123;&#123;count&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27; //引入ref 声明数据</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;secondHome&quot;,</span><br><span class="line">  setup() &#123;//在beforeCreate之前</span><br><span class="line">    const count = ref(0);//声明单个变量</span><br><span class="line">    function addone() &#123;</span><br><span class="line">      count.value++ //先通过.value 拿到声明数据的变量 自加一</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      count,</span><br><span class="line">      addone,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="声明单个变量"><a href="#声明单个变量" class="headerlink" title="声明单个变量"></a>声明单个变量</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line"> &lt;h2&gt;setup声明的值:&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line"> &lt;h2&gt;setup声明的值:&#123;&#123;user.username&#125;&#125;&lt;/h2&gt;</span><br><span class="line"> &lt;h2&gt;setup声明的值:&#123;&#123;user.userage&#125;&#125;&lt;/h2&gt;</span><br><span class="line"> &lt;h2&gt;setup声明的值:&#123;&#123;userList&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import &#123;ref&#125; from &#x27;vue&#x27; //引入ref 声明数据</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;secondHome&quot;,</span><br><span class="line">        //------------第一种使用ref声明数据---------------</span><br><span class="line">        setup()&#123;</span><br><span class="line">            console.info(&#x27;setup&#x27;)</span><br><span class="line">            /*通过ref 去使用，声明一个响应式变量*/</span><br><span class="line">          const name = ref(&quot;张三&quot;);</span><br><span class="line">const user =ref(&#123;username:&#x27;李四&#x27;,userage:12&#125;)</span><br><span class="line">const userList =ref([&#123;username:&#x27;王五&#x27;,userage:12&#125;,&#123;username:&#x27;赵六&#x27;,userage:12&#125;])</span><br><span class="line">console.info(&quot;setup声明的数据==&gt;&quot;,name.value);</span><br><span class="line">console.info(&quot;setup声明的user数据==&gt;&quot;,user.value)</span><br><span class="line">console.info(&quot;setup声明的userList数据==&gt;&quot;,userList.value)</span><br><span class="line">            return&#123;</span><br><span class="line">                name,</span><br><span class="line">                user,</span><br><span class="line">                userlist</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="使用reactive声明多个变量"><a href="#使用reactive声明多个变量" class="headerlink" title="使用reactive声明多个变量"></a>使用reactive声明多个变量</h4><blockquote><p>toRefs()将响应式的对象变为普通对象 再解构，在模板中就可以直接使用属性，不用name,user,userlist</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;setup声明的值：&#123;&#123;name&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;h3&gt;setup声明的值：&#123;&#123;user&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;h3&gt;setup声明的值：&#123;&#123;userlist&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import &#123;reactive,toRefs&#125; from &#x27;vue&#x27; //引入ref 声明数据</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;secondHome&quot;,</span><br><span class="line"></span><br><span class="line">        //------------第二种使用 reactive 声明数据---------------</span><br><span class="line">        setup()&#123;</span><br><span class="line">            console.info(&#x27;setup&#x27;)</span><br><span class="line">const data =reactive(&#123;</span><br><span class="line">name:&#x27;张三&#x27;,</span><br><span class="line">msg:&#x27;goodbye&#x27;,</span><br><span class="line">user:&#123;username:&#x27;李四&#x27;,userage:12&#125;,</span><br><span class="line">userList:[&#123;username:&#x27;王五&#x27;,userage:12&#125;,&#123;username:&#x27;赵六&#x27;,userage:12&#125;]</span><br><span class="line">&#125;);</span><br><span class="line">            return&#123;</span><br><span class="line">                //toRefs()将响应式的对象变为普通对象 再解构，在模板中就可以直接使用属性，不用name,user,userlist</span><br><span class="line">                ...toRefs(data)</span><br><span class="line">               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-0和3-0生命周期对照"><a href="#2-0和3-0生命周期对照" class="headerlink" title="2.0和3.0生命周期对照"></a>2.0和3.0生命周期对照</h3><h4 id="2-0"><a href="#2-0" class="headerlink" title="2.0"></a>2.0</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2.0生命周期</span><br><span class="line">beforeCreate(组件创建之前)</span><br><span class="line">created(组件创建完成)</span><br><span class="line">beforeMount(组件挂载之前)</span><br><span class="line">mounted(组件挂载完成)</span><br><span class="line">beforeUpdate(数据更新，虚拟DOM打补丁之前)</span><br><span class="line">updated(数据更新，虚拟DOM渲染完成)</span><br><span class="line">beforeDestroy(组件销毁之前)</span><br><span class="line">destroyed(组件销毁之后)</span><br></pre></td></tr></table></figure><h4 id="3-0"><a href="#3-0" class="headerlink" title="3.0"></a>3.0</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3.0生命周期</span><br><span class="line">setup(组件创建之前)</span><br><span class="line">setup(组件创建完成)</span><br><span class="line">onBeforeMount(组件挂载之前)</span><br><span class="line">onMounted(组件挂载完成)</span><br><span class="line">onBeforeUpdate(数据更新，虚拟DOM打补丁之前)</span><br><span class="line">onUpdated(数据更新，虚拟DOM渲染完成)</span><br><span class="line">onBeforeUnmount(组件销毁之前)</span><br><span class="line">onUnmounted(组件销毁之后)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> setup函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库基本操作</title>
      <link href="/2021/09/05/mysql/mysqlOne/"/>
      <url>/2021/09/05/mysql/mysqlOne/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一些关于数据库的基本操作</p><h3 id="操作database"><a href="#操作database" class="headerlink" title="操作database"></a>操作database</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">查询数据库：show databases;</span><br><span class="line"></span><br><span class="line">创建数据库：create database 库名;</span><br><span class="line"></span><br><span class="line">删除数据库：drop database 库名</span><br><span class="line"></span><br><span class="line">查看指定库的表：show tables where 目标库名</span><br></pre></td></tr></table></figure><h3 id="操作table"><a href="#操作table" class="headerlink" title="操作table"></a>操作table</h3><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">创建表                   //判断表名是否重复</span><br><span class="line">                 语法: create table [if not exists]表名(</span><br><span class="line">                                   字段1 数据类型[字段属性][约束][索引][注释]，</span><br><span class="line">                                    ......</span><br><span class="line">                                   字段1 数据类型[字段属性][约束][索引][注释]                                                                   )[表类型][表字符集][注释];</span><br><span class="line">                 示例:#创建学生表</span><br><span class="line">                       create table `student`(</span><br><span class="line">                                     `studentNo` int(4) primary key</span><br><span class="line">                                     `name` char(10),</span><br><span class="line">                                      .....);</span><br><span class="line">                 注意:多字段使用逗号分隔，保留字用撇号括起来，单行注释:#......,</span><br><span class="line">                                                             多行注释:/*.....*/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">删除表：drop table 表名</span><br><span class="line"></span><br><span class="line">查看表结构：desc 表名</span><br><span class="line"></span><br><span class="line">查看表：show tables</span><br><span class="line"></span><br><span class="line">查看创建表信息：show create table 表名</span><br><span class="line"></span><br><span class="line">修改表名  alter table 旧表名 rename 新表名;</span><br><span class="line">添加字段  alter table 表名 add 字段名 数据类型[属性];</span><br><span class="line">修改字段  alter table 表名 change 原字段名 新字段名  数据类型[属性];</span><br><span class="line">删除字段  alter table 表名 drop 字段名;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="操作数据"><a href="#操作数据" class="headerlink" title="操作数据"></a>操作数据</h3><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">精确查询：select * from 表名 where 条件语句</span><br><span class="line"></span><br><span class="line">　　　　　　运算符查询：select * from 表名 where id = 1+1</span><br><span class="line"></span><br><span class="line">　　　　　　　　　　　　select * from 表名 where id &lt; 100</span><br><span class="line"></span><br><span class="line">　　　　　　逻辑查询：select * from 表名 where and条件</span><br><span class="line"></span><br><span class="line">　　　　　　　　　　　select * from 表名 where or条件</span><br><span class="line"></span><br><span class="line">　　　　　　模糊查询：select * from 表名 where 列名 like&#x27;值&#x27;　　值：%a%(查找中间有a的数据)  a%(查找以a开头的数据)  %a（查找以a结尾的数据）</span><br><span class="line"></span><br><span class="line">　　　　　　排序与受限查询：select * from 表名 where order by 列名 desc　　desc：表示从大到小排序  asc：表示从小到大排序</span><br><span class="line"></span><br><span class="line">　　　　　　　　　　　　　　select * form 表名 limit x,y　　x：表示跳过多少条  y：表示去多少条</span><br><span class="line"></span><br><span class="line">　　　　　　聚合排序：select count(列名) from 表名　　</span><br><span class="line"></span><br><span class="line">　　　　　　　　　　　count：计算表中某个列或多个列中数据的次数</span><br><span class="line"></span><br><span class="line">　　　　　　　　　　　avg：平均值</span><br><span class="line"></span><br><span class="line">　　　　　　　　　　　max：最大值</span><br><span class="line"></span><br><span class="line">　　　　　　　　　　　min：最小值</span><br><span class="line"></span><br><span class="line">　　　　　　　　　　　sum：总和　　一般用于计算价格</span><br><span class="line"></span><br><span class="line">　　　　　　区间查询：select * from 表名 where 字段 between 0 and 10　　查找0到10区间的数据</span><br><span class="line"></span><br><span class="line">　　　　　　分组查询：select 展示的列 from 表名 group by 参考列</span><br><span class="line"></span><br><span class="line">　　　　　　　　　　　select name,count(列) from 表名 group by name</span><br><span class="line"></span><br><span class="line">　　　　　　　　　　　select  name,count(content)  from  表名  group  by   name  having   count(content)  &gt;  5　　having 是在聚合的基础上再筛选</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">添加：insert into 表名 value()</span><br><span class="line"></span><br><span class="line">删除：delete from 表名 （慎用，删除整个表数据）</span><br><span class="line"></span><br><span class="line">delete from 表名 where 条件语句</span><br><span class="line"></span><br><span class="line">修改：update 表名 set 字段名=值 where 条件语句</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql数据库基本操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git命令操作</title>
      <link href="/2021/09/04/github/git%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/09/04/github/git%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用github的时候肯定不满足于单纯的只创建一个空仓库,<br>一些git的命令操作</p><h3 id="github基础操作"><a href="#github基础操作" class="headerlink" title="github基础操作"></a>github基础操作</h3><p>初始化一个空仓库并且推送代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;# q&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin https://github.com/xxx/xxx.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h3 id="推送到现有仓库"><a href="#推送到现有仓库" class="headerlink" title="推送到现有仓库"></a>推送到现有仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/xxx/xxx.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h3 id="克隆远程版本库"><a href="#克隆远程版本库" class="headerlink" title="克隆远程版本库"></a>克隆远程版本库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;url&gt;   # 克隆远程版本库</span><br><span class="line">git init  # 初始化本地版本库</span><br></pre></td></tr></table></figure><h3 id="修改和提交"><a href="#修改和提交" class="headerlink" title="修改和提交"></a>修改和提交</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git status            # 查看状态</span><br><span class="line">git diff                    # 查看变更内容</span><br><span class="line">git add .                   # 跟踪所有改动过的内容,提交到缓存区</span><br><span class="line">git add &lt;file&gt;              # 跟踪指定文件，提交到缓存区</span><br><span class="line">git mv &lt;oldfile&gt; &lt;newfile&gt;  # 文件名修改</span><br><span class="line">git rm &lt;file&gt;               # 删除暂存区或分支上的文件, 同时工作区也不需要这个文件了</span><br><span class="line">git rm --cached &lt;file&gt;      # 需要删除暂存区或分支上的文件, 但本地又需要使用, 只是不希望这个文件被版本控制</span><br><span class="line">git commit -m &quot;commit message&quot; # 提交所有更新过的文件</span><br><span class="line">git commit --amend          # 修改最后一次提交</span><br></pre></td></tr></table></figure><h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log              # 查看提交历史</span><br><span class="line">git log -p &lt;file&gt;    # 查看指定文件的提交历史</span><br><span class="line">git blame &lt;file&gt;     # 以列表的方式查看指定文件的提交历史</span><br></pre></td></tr></table></figure><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD    # 撤销工作目录中所有未提交文件的修改内容</span><br><span class="line">git checkout HEAD &lt;file&gt; # 撤销指定的未提交文件的修改内容</span><br><span class="line">git revert &lt;commit&gt;      # 撤销指定的提交</span><br></pre></td></tr></table></figure><h3 id="分支和标签"><a href="#分支和标签" class="headerlink" title="分支和标签"></a>分支和标签</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git branch                   # 显示所有本地的分支</span><br><span class="line">git checkout &lt;branch/tag&gt;    # 切换到指定分支或者标签</span><br><span class="line">git branch &lt;new-branch&gt;      # 创建新分支</span><br><span class="line">git branch -d &lt;branch&gt;       # 删除本地分支</span><br><span class="line">git tag                      # 列出所有本地标签</span><br><span class="line">git tag &lt;tagname&gt;            # 基于最新提交创建标签</span><br><span class="line">git tag -d &lt;tagname&gt;         # 删除指定标签</span><br></pre></td></tr></table></figure><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch&gt;           # 合并指定分支到当前分支</span><br><span class="line">git rebase &lt;branch&gt;          # 衍合指定分支到当前分支</span><br></pre></td></tr></table></figure><h3 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git remote -v                         # 查看远程版本库信息</span><br><span class="line">git remote show &lt;remote&gt;              # 查看指定远程版本库信息</span><br><span class="line">git remote add &lt;remote&gt; &lt;url&gt;         # 添加远程版本库</span><br><span class="line">git fetch &lt;remote&gt;                    # 拉取远程库代码</span><br><span class="line">git pull &lt;remote&gt; &lt;branch&gt;            # 下载远程库代码及快速合并</span><br><span class="line">git push &lt;remote&gt; &lt;branch&gt;            # 上传代码及快速合并</span><br><span class="line">git push &lt;remote&gt; :&lt;branch/tag-name&gt;  # 删除远程分支或者标签</span><br><span class="line">git push --tags                       # 上传所有标签</span><br></pre></td></tr></table></figure><h3 id="默认设置"><a href="#默认设置" class="headerlink" title="默认设置"></a>默认设置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">master  # 默认开发分支</span><br><span class="line">origin  # 默认远程版本库</span><br><span class="line">HEAD    # 默认开发分会</span><br><span class="line">HEAD^   # HEAD的父提交</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git命令操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue使用dialog</title>
      <link href="/2021/09/03/vue/dialog/"/>
      <url>/2021/09/03/vue/dialog/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>初学vue时做demo练习时  喜欢跳转另一个vue页面进行操作，这次来点不一样的</p><div class="note danger modern"><p>当前 前提你得引入elementui</p></div><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button type=&quot;text&quot; @click=&quot;centerDialogVisible = true&quot;&gt;点击打开 Dialog&lt;/el-button&gt; //一个点击事件 当点击的时候 打开dialong</span><br><span class="line">&lt;el-dialog title=&quot;提示&quot; :visible.sync=&quot;centerDialogVisible&quot; width=&quot;50%&quot; center&gt;</span><br><span class="line">&lt;!-- title:是 头部  中间的div是body  #footer是底部 --&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span&gt;需要注意的是内容是默认不居中的&lt;/span&gt;</span><br><span class="line">&lt;el-form :label-position=&quot;labelPosition&quot; :model=&quot;cityOne&quot; :disabled=&quot;true&quot; label-width=&quot;80px&quot;&gt;</span><br><span class="line">&lt;el-form-item label=&quot;城市区号&quot;&gt;</span><br><span class="line">&lt;el-input v-model=&quot;cityOne.citycode&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br><span class="line">&lt;el-form-item label=&quot;城市编号&quot;&gt;</span><br><span class="line">&lt;el-input v-model=&quot;cityOne.id&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br><span class="line">&lt;/el-form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">&lt;el-button @click=&quot;centerDialogVisible = false&quot;&gt;取 消&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;primary&quot; @click=&quot;centerDialogVisible = false&quot;&gt;确 定&lt;/el-button&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/el-dialog&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">                   return&#123;</span><br><span class="line">                     cityOne:[], //dialong双向绑定的对象</span><br><span class="line">                     centerDialogVisible: false, //控制dialong的显隐  默认不显示</span><br><span class="line">                     labelPosition: &#x27;right&#x27;, //控制对齐方式  前提需要一个宽度</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> element-ui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dialog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue简单使用echarts</title>
      <link href="/2021/09/02/vue/vue%E4%BD%BF%E7%94%A8echarts/"/>
      <url>/2021/09/02/vue/vue%E4%BD%BF%E7%94%A8echarts/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>商业级数据图表，它是一个纯JavaScript的图标库，兼容绝大部分的浏览器，底层依赖轻量级的canvas类库ZRender，提供直观，生动，可交互，可高度个性化定制的数据可视化图表。创新的拖拽重计算、数据视图、值域漫游等特性大大增强了用户体验，赋予了用户对数据进行挖掘、整合的能力。</p><h2 id="通过npm引入echarts"><a href="#通过npm引入echarts" class="headerlink" title="通过npm引入echarts"></a>通过npm引入echarts</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install echarts //引入的是最新版本的echarts  暂为 5.2.0</span><br><span class="line"></span><br><span class="line">通过@版本号 可以引入指定版本的echarts</span><br><span class="line">npm install echarts@4.8.0 --save</span><br><span class="line"></span><br><span class="line">至于为什么在这里提可以引入指定版本的 是因为</span><br><span class="line">4.9版本以下有地图，5.0版本以上失去这个功能</span><br></pre></td></tr></table></figure><h2 id="使用echarts-三步走"><a href="#使用echarts-三步走" class="headerlink" title="使用echarts 三步走"></a>使用echarts 三步走</h2><h3 id="1-现在我们想要使用的vue页面里引入"><a href="#1-现在我们想要使用的vue页面里引入" class="headerlink" title="1.现在我们想要使用的vue页面里引入"></a>1.现在我们想要使用的vue页面里引入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import * as echarts from &#x27;echarts&#x27;;//5.0以上的版本</span><br><span class="line">import echarts from &#x27;echarts&#x27;; //5.0以下的版本</span><br><span class="line"></span><br><span class="line">按需引入</span><br></pre></td></tr></table></figure><h3 id="2-声明一个echarts父级容器"><a href="#2-声明一个echarts父级容器" class="headerlink" title="2.声明一个echarts父级容器"></a>2.声明一个echarts父级容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;echartsFather&quot; style=&quot;width: 500px;height: 500px;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="3-在vue的挂载的生命周期里进行echarts的使用"><a href="#3-在vue的挂载的生命周期里进行echarts的使用" class="headerlink" title="3.在vue的挂载的生命周期里进行echarts的使用"></a>3.在vue的挂载的生命周期里进行echarts的使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">2.1根据id找到DOM元素</span><br><span class="line">  let doc=document.getElementById(&quot;firstEcharts&quot;);</span><br><span class="line">2.2初始化DOM元素</span><br><span class="line">  let myChart = echarts.init(doc);</span><br><span class="line">2.3设置option</span><br><span class="line">myChart.setOption(&#123;</span><br><span class="line">  xAxis: &#123;</span><br><span class="line">    type: &#x27;category&#x27;,</span><br><span class="line">    data: [&#x27;Mon&#x27;, &#x27;Tue&#x27;, &#x27;Wed&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;, &#x27;Sun&#x27;]</span><br><span class="line">  &#125;,</span><br><span class="line">  yAxis: &#123;</span><br><span class="line">    type: &#x27;value&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  series: [&#123;</span><br><span class="line">    data: [820, 932, 901, 934, 1290, 1330, 1320],</span><br><span class="line">    type: &#x27;line&#x27;,</span><br><span class="line">    smooth: true</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/AndrChen55302/CDN@main/img/hpp_upload/1630600328000.png"><br>更多内容请访问  echarts:  <a href="https://echarts.apache.org/zh/index.html">https://echarts.apache.org/zh/index.html</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue使用vue-seamless-scroll实现无缝滚动</title>
      <link href="/2021/09/01/vue/vue-seamless-scroll/"/>
      <url>/2021/09/01/vue/vue-seamless-scroll/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过使用 vue-seamless-scroll这个插件可以快速的实现无缝滚动</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-seamless-scroll --save　</span><br></pre></td></tr></table></figure><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><h4 id="1-在main-js里全局挂载"><a href="#1-在main-js里全局挂载" class="headerlink" title="1.在main.js里全局挂载"></a>1.在main.js里全局挂载</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import vueSeamlessScroll from &#x27;vue-seamless-scroll&#x27;</span><br><span class="line">Vue.use(vueSeamlessScroll)</span><br></pre></td></tr></table></figure><h4 id="2-在要使用该插件的-vue文件中引入"><a href="#2-在要使用该插件的-vue文件中引入" class="headerlink" title="2.在要使用该插件的.vue文件中引入"></a>2.在要使用该插件的.vue文件中引入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import vueSeamlessScroll from &#x27;vue-seamless-scroll&#x27;</span><br><span class="line"></span><br><span class="line"> components: &#123;//引入插件都需要在这里声明</span><br><span class="line">      vueSeamlessScroll,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">      classOption: () =&gt; (&#123;</span><br><span class="line">        step: 2.5, // 数值越大速度滚动越快</span><br><span class="line">        step: 0.2, // 数值越大速度滚动越快</span><br><span class="line">        limitMoveNum: 2, // 开始无缝滚动的数据量 this.dataList.length</span><br><span class="line">        hoverStop: true, // 是否开启鼠标悬停stop</span><br><span class="line">        direction: 1, // 0向下 1向上 2向左 3向右</span><br><span class="line">        openWatch: true, // 开启数据实时监控刷新dom</span><br><span class="line">        singleHeight: 0, // 单步运动停止的高度(默认值0是无缝不停止的滚动) direction =&gt; 0/1</span><br><span class="line">        singleWidth: 0, // 单步运动停止的宽度(默认值0是无缝不停止的滚动) direction =&gt; 2/3</span><br><span class="line">        waitTime: 1000 // 单步运动停止的时间(默认值1000ms)</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;vue-seamless-scroll :data=&quot;hotList&quot; :class-option=&quot;classOption&quot; class=&quot;seamless-warp&quot;&gt;</span><br><span class="line">      &lt;ul class=&quot;scroll-item&quot;&gt;</span><br><span class="line">        &lt;li v-for=&quot;item in hotList&quot;&gt;</span><br><span class="line">          &lt;a &gt;&#123;&#123;item&#125;&#125;&lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/vue-seamless-scroll&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import vueSeamlessScroll from &#x27;vue-seamless-scroll&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        hotList: [</span><br><span class="line">          &#x27;中国成功发射天绘一号04星 系长征运载火箭第381次飞行&#x27;,</span><br><span class="line">          &#x27;退役军人事务部：正起草退役军人安置条例 争取尽快出台&#x27;,</span><br><span class="line">          &#x27;新华社达累斯萨拉姆7月28日电（记者高竹 李斯博）坦桑尼亚总统哈桑28日在位于坦最大城市达累斯萨拉姆的总统府宣布，启动该国新冠疫苗接种计划。她本人当场接种新冠疫苗。&#x27;,</span><br><span class="line">          &#x27;美联储重申将维持超低利率 应对通货膨胀和肺炎疫情反弹&#x27;,</span><br><span class="line">          &#x27;他曝光美军无人机杀害阿富汗平民 却因泄密获刑45个月&#x27;,</span><br><span class="line">          &#x27;鹤壁淇县灾后重建：村民返家抢救麦子 村里消杀防疫&#x27;,</span><br><span class="line">          &#x27;生态环境部公布打击危险废物环境违法犯罪典型案例&#x27;,</span><br><span class="line">          &#x27;一头须鲸在浙江瑞安滩涂搁浅后续：救援12小时后死亡&#x27;,</span><br><span class="line">          &#x27;台湾新增11例确诊病例 其中10例为本地病例&#x27;,</span><br><span class="line">          &#x27;除了戴口罩 美CDC对接种疫苗者是否需检测也有新说法&#x27;,</span><br><span class="line">          &#x27;台湾本地疫苗开放施打意愿登记 民众疑虑多反应冷淡&#x27;,</span><br><span class="line">          &#x27;迪迩秀：我是怎么得到这管“泄漏病毒”的？多国外长拒绝新冠溯源政治化&#x27;,</span><br><span class="line">          &#x27;第14金+打破世界纪录！中国4朵金花夺游泳接力冠军&#x27;,</span><br><span class="line">          &#x27;全国至少11地机场、港口、车站爆发疫情 张伯礼提4点建议&#x27;,</span><br><span class="line">          &#x27;网红为拍视频穿救生衣偷救生艇 被发现后被救援队怒怼&#x27;</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      vueSeamlessScroll,</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      classOption: () =&gt; (&#123;</span><br><span class="line">        step: 2.5, // 数值越大速度滚动越快</span><br><span class="line">        step: 0.2, // 数值越大速度滚动越快</span><br><span class="line">        limitMoveNum: 2, // 开始无缝滚动的数据量 this.dataList.length</span><br><span class="line">        hoverStop: true, // 是否开启鼠标悬停stop</span><br><span class="line">        direction: 1, // 0向下 1向上 2向左 3向右</span><br><span class="line">        openWatch: true, // 开启数据实时监控刷新dom</span><br><span class="line">        singleHeight: 0, // 单步运动停止的高度(默认值0是无缝不停止的滚动) direction =&gt; 0/1</span><br><span class="line">        singleWidth: 0, // 单步运动停止的宽度(默认值0是无缝不停止的滚动) direction =&gt; 2/3</span><br><span class="line">        waitTime: 1000 // 单步运动停止的时间(默认值1000ms)</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue-seamless-scroll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>computed计算属性</title>
      <link href="/2021/08/31/vue/computed/"/>
      <url>/2021/08/31/vue/computed/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>vue template模板中不推荐使用过多的逻辑，这样会导致整个模板过重且难以维护<br>所以 复杂的逻辑 应该使用 computed计算属性</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>计算值</li><li>简化template里面 data属性计算和处理props或$emit的传值，computed(数据联动)。</li><li>具有缓存性，页面重新渲染值不变化,计算属性会立即返回之前的计算结果，而不必再次执行函数,这样就避免了一个值多次进行计算，影响代码的执行效率。</li></ol><h2 id="一个简单的小案例使用一下"><a href="#一个简单的小案例使用一下" class="headerlink" title="一个简单的小案例使用一下"></a>一个简单的小案例使用一下</h2><p><img src="/../../img/vue/computed%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/two.png"><br><img src="/../../img/vue/computed%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/one.png"></p><h3 id="html元素"><a href="#html元素" class="headerlink" title="html元素"></a>html元素</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;div v-for=&quot;(item,index) in result&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">科目:&#123;&#123;item.lable&#125;&#125;</span><br><span class="line">&lt;label&gt;</span><br><span class="line">分数: &lt;input type=&quot;text&quot; v-model=&quot;item.marks&quot; /&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">总分数:&#123;&#123;marksNum&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="data数据"><a href="#data数据" class="headerlink" title="data数据"></a>data数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">result:[</span><br><span class="line">&#123;lable:&#x27;数学&#x27;,marks:90&#125;,</span><br><span class="line">&#123;lable:&#x27;语文&#x27;,marks:92&#125;,</span><br><span class="line">&#123;lable:&#x27;语文&#x27;,marks:72&#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;//计算属性</span><br><span class="line">marksNum:function()&#123;</span><br><span class="line">let zongShu = 0 ;//局部声明一个变量  总数</span><br><span class="line">for(let i=0;i&lt;this.result.length;i++)&#123;</span><br><span class="line">zongShu+=parseInt(this.result[i].marks);</span><br><span class="line">&#125;</span><br><span class="line">return zongShu;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>parseInt():将字符串解析为数字</p><h3 id="为什么要使用parseInt函数"><a href="#为什么要使用parseInt函数" class="headerlink" title="为什么要使用parseInt函数"></a>为什么要使用parseInt函数</h3><p>当改变input输入框的值时 因为type=’text’的原因，你输入的值就变成了string类型</p>]]></content>
      
      
      <categories>
          
          <category> vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.0生命周期</title>
      <link href="/2021/08/30/vue/Vue2.0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2021/08/30/vue/Vue2.0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用了一段时间vue之后，虽然知道怎么和后端进行数据交互，但使用最多的还是使用created这个生命周期。<br>对于其他生命周期还是不甚了解，只会简单的使用。</p><h2 id="什么是生命周期"><a href="#什么是生命周期" class="headerlink" title="什么是生命周期"></a>什么是生命周期</h2><p>从Vue实例创建、运行、到销毁期间，总是伴随<br>各式各样的事件，这些事件统称为生命周期</p><h2 id="Vue2生命周期图"><a href="#Vue2生命周期图" class="headerlink" title="Vue2生命周期图"></a>Vue2生命周期图</h2><p><img src="/../../img/vue/Vue2.0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/shengmingzhouqi.png"><br><img src="/../../img/vue/Vue2.0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/shengmingzhouqi2.webp"></p><p>对于生命周期的执行顺序可以从上图得知。</p><p>图片来源：<a href="https://blog.csdn.net/ling_xy/article/details/119566227">https://blog.csdn.net/ling_xy/article/details/119566227</a></p><h2 id="八大生命周期"><a href="#八大生命周期" class="headerlink" title="八大生命周期"></a>八大生命周期</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beforeCreate，created，beforeMount，mounted，beforeUpdate，updated，beforeDestroy，destroyed</span><br></pre></td></tr></table></figure><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h4 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h4><p>此时组件的props、methods、data、computed、watchd，DOM结构没初始化，什么也做不了</p><h4 id="created"><a href="#created" class="headerlink" title="created"></a>created</h4><p>此时组件的props、methods、data、computed、watc可用，但是DOM结构仍然没有初始化，此时可以发起ajax请求</p><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><h4 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h4><p>此时只是生成render函数，并没有执行生成vnode，所以我们也看不到页面</p><h4 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h4><p>挂载完成，整个创建过程完成。此时我们可以在页面看到真实的数据</p><h3 id="vue的挂载是什么？"><a href="#vue的挂载是什么？" class="headerlink" title="vue的挂载是什么？"></a>vue的挂载是什么？</h3><p>将组件渲染，并且构造 DOM 元素然后塞入页面的过程称为组件的挂载<br>ps. 以上流程只会在初始化时执行一次，之后不会再被触发</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><h4 id="beforeUpadte"><a href="#beforeUpadte" class="headerlink" title="beforeUpadte"></a>beforeUpadte</h4><p>data被改变时触发 此时数据是新的，但页面呈现仍然是旧数据</p><h4 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h4><p>更新完毕触发生成vnode，转换为真实DOM，然后插入，此时页面呈现的是最新的</p><h3 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h3><h4 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy"></a>beforeDestroy</h4><p>组件要销毁前触发此时可以使用vm的所有属性和方法</p><h4 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a>destroyed</h4><p>组件被销毁后触发</p>]]></content>
      
      
      <categories>
          
          <category> vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2.0生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
